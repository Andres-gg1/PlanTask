{% extends "layout.jinja2" %}

{% block title %}{{ testing_charts }}{% endblock %}

{% block styles %}
    <link rel="stylesheet" href="{{ request.static_url('plantask:static/styles/charts.css') }}">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cal-heatmap@4.3.4/cal-heatmap.css">
    <link rel="stylesheet" href="{{ request.static_url('plantask:static/styles/project_dashboard.css') }}">
{% endblock %}

{% block content %}
<main class="mycontainer">
<h2 class="mb-4">Project Dashboard: {{ project.name }}</h2>

{% set total_tasks = chart_data | sum %}

{% if total_tasks == 0 %}
    <div class="alert alert-info mt-4">
        There are currently no tasks registered in this project.
    </div>
{% else %}
    {% set assigned_labels = tasks_by_status_and_label['assigned'] %}
    {% set in_progress_labels = tasks_by_status_and_label['in_progress'] %}
    {% set under_review_labels = tasks_by_status_and_label['under_review'] %}
    {% set completed_labels = tasks_by_status_and_label['completed'] %}
    <br>

    <div id="chartsContainer">
        <div class="card chart-draggable shadow fade-in-card mb-4" id="chartCard" draggable="true">
            <div class="card-body p-0" style="display: flex; flex-direction: column; justify-content: center; align-items: center; height: 400px;">
                <div class="chart-title" style="font-weight: bold; margin-bottom: 8px;">Tasks by Status</div>
                <div class="chart-description" style="font-size: 14px; margin-bottom: 8px;">
                    Total tasks: {{ total_tasks }}<br>
                </div>
                <div id="apexDoughnut" style="width: 100%; max-width: 600px; height: 320px;"></div>
            </div>
        </div>
        {% if assigned_labels and assigned_labels|length > 0 %}
        <div class="card chart-draggable shadow fade-in-card mb-4" id="chartCardAssigned" draggable="true">
            <div class="card-body p-0" style="flex-direction: column; display: flex; justify-content: center; align-items: center; height: 400px;">
                <div class="chart-title" style="font-weight: bold; margin-bottom: 8px;">Tasks Assigned by Department</div>
                <div id="chartAssigned" style="width: 100%; max-width: 600px; height: 260px;"></div>
            </div>
        </div>
        {% endif %}
        {% if in_progress_labels and in_progress_labels|length > 0 %}
        <div class="card chart-draggable shadow fade-in-card mb-4" id="chartCardInProgress" draggable="true">
            <div class="card-body p-0" style="display: flex; flex-direction: column; justify-content: center; align-items: center; height: 400px;">
                <div class="chart-title" style="font-weight: bold; margin-bottom: 8px;">Tasks In Progress by Department</div>
                <div id="chartInProgress" style="width: 100%; max-width: 600px; height: 300px;"></div>
            </div>
        </div>
        {% endif %}
        {% if under_review_labels and under_review_labels|length > 0 %}
        <div class="card chart-draggable shadow fade-in-card mb-4" id="chartCardUnderReview" draggable="true">
            <div class="card-body p-0" style="display: flex; flex-direction: column; justify-content: center; align-items: center; height: 400px;">
                <div class="chart-title" style="font-weight: bold; margin-bottom: 8px;">Tasks Under Review by Department</div>
                <div id="chartUnderReview" style="width: 100%; max-width: 600px; height: 300px;"></div>
            </div>
        </div>
        {% endif %}
        {% if completed_labels and completed_labels|length > 0 %}
        <div class="card chart-draggable shadow fade-in-card mb-4" id="chartCardCompleted" draggable="true">
            <div class="card-body p-0" style="display: flex; flex-direction: column; justify-content: center; align-items: center; height: 400px;">
                <div class="chart-title" style="font-weight: bold; margin-bottom: 8px;">Tasks Completed by Department</div>
                <div id="chartCompleted" style="width: 100%; max-width: 600px; height: 300px;"></div>
            </div>
        </div>
        {% endif %}
        <div class="card chart-draggable shadow fade-in-card mb-4" id="chartCardDueDates" draggable="true">
            <div class="card-body p-0" style="display: flex; flex-direction: column; justify-content: center; align-items: center; height: 400px;">
                <div class="chart-title" style="font-weight: bold; margin-bottom: 8px;">Due Dates Overview</div>
                <div id="chartDueDates" style="width: 100%; max-width: 600px; height: 300px;"></div>
            </div>
        </div>

        <div class="card chart-draggable shadow fade-in-card mb-4" id="chartCardEchartsHeatmap" draggable="true" style="width: 100%; max-width: 700px;">
            <div class="card-body p-0" style="display: flex; flex-direction: column; justify-content: center; align-items: center; width: 650px; height: 400px;">
                <div class="chart-title" style="font-weight: bold; margin-bottom: 8px;">Due Dates Heatmap</div>
                <div id="echarts-heatmap" style="width: 100%; max-width: 650px; height: 300px;"></div>
            </div>
        </div>
    </div>
</main>
{% endif %}

<!-- Modal to show tasks by status -->
<div class="modal fade" id="taskListModal" tabindex="-1" aria-labelledby="taskListModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="taskListModalLabel">Tasks in status</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <ul id="taskList" class="list-group"></ul>
      </div>
    </div>
  </div>
</div>

{% endblock %}

{% block scripts %}
<script src="https://cdn.jsdelivr.net/npm/apexcharts"></script>
<script src="https://cdn.jsdelivr.net/npm/cal-heatmap@4.3.4/dist/cal-heatmap.umd.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/echarts@5.5.0/dist/echarts.min.js"></script>
<script>
    document.addEventListener('DOMContentLoaded', function() {
        setTimeout(function() {
            document.getElementById('chartCard').classList.add('visible');
        }, 200);
    });

    const tasksByStatus = {{ tasks_by_status_json | tojson }};
    const chartLabels = {{ chart_labels | tojson }};
    const chartData = {{ chart_data | tojson }};
    const tasksByStatusAndLabel = {{ tasks_by_status_and_label | tojson }};
    const labelColors = {{ label_colors | tojson }};
    const dueDatesLabels = {{ due_dates_labels | tojson }};
    const dueDatesCounts = {{ due_dates_counts | tojson }};
    const dueDatesHeatmap = {{ due_dates_heatmap | tojson }};
    const dueDatesHeatmapEcharts = {{ due_dates_heatmap_echarts | tojson }};

    var options = {
        chart: {
            type: 'donut',
            height: 320,
            events: {
                dataPointSelection: function(event, chartContext, config) {
                    const index = config.dataPointIndex;
                    const status = chartLabels[index];
                    const tasks = tasksByStatus[status];
                    renderTaskList(tasks, status);
                }
            }
        },
        labels: chartLabels,
        series: chartData,
        colors: ['#36a2eb', '#ffcd56', '#ff6384', '#4bc0c0'],
        legend: {
            position: 'bottom',
            fontSize: '18px',
            fontWeight: 700,
            markers: {
                width: 24,
                height: 24
            }
        },
        plotOptions: {
            pie: {
                donut: {
                    size: '70%'
                }
            }
        },
        dataLabels: {
            style: {
                fontSize: '18px',
                fontWeight: 'bold'
            }
        },
        tooltip: {
            style: {
                fontSize: '16px'
            }
        },
        responsive: [{
            breakpoint: 600,
            options: {
                chart: { width: 300, height: 300 }
            }
        }]
    };

    var chart = new ApexCharts(document.querySelector("#apexDoughnut"), options);
    chart.render();

    function renderTaskList(tasks, status) {
        const taskList = document.getElementById('taskList');
        if (!taskList) return;
        taskList.innerHTML = '';
        const title = document.getElementById('taskListModalLabel');
        title.textContent = `Tasks in status: ${status.replace('_', ' ')}`;

        if (!tasks || tasks.length === 0) {
            taskList.innerHTML = '<li class="list-group-item">No tasks in this status.</li>';
        } else {
            tasks.forEach(task => {
                const li = document.createElement('li');
                li.className = 'list-group-item';
                li.textContent = `${task.name} - Due date: ${task.due_date}`;
                taskList.appendChild(li);
            });
        }

        // Show the modal (Bootstrap 5)
        const modal = new bootstrap.Modal(document.getElementById('taskListModal'));
        modal.show();
    }

    function resetTaskList() {
        const taskList = document.getElementById('taskList');
        const title = document.getElementById('taskListModalLabel');
        title.textContent = "Select a status in the chart to see its tasks";
        taskList.innerHTML = '';
    }

    function renderDepartmentChart(containerId, statusKey) {
        const labelCounts = tasksByStatusAndLabel[statusKey];
        const labels = Object.keys(labelCounts);
        const data = Object.values(labelCounts);

        // Get the colors in the same order as the labels
        const colors = labels.map(label => labelColors[label] || '#cccccc');

        var options = {
            chart: {
                type: 'bar',
                height: 300,
                toolbar: { show: false },
                events: {
                    dataPointSelection: function(event, chartContext, config) {
                        const label = labels[config.dataPointIndex];
                        // Find tasks for this label and status
                        const tasks = [];
                        Object.values(tasksByStatus).forEach(arr => {
                            arr.forEach(t => {
                                if (t.label === label && t.status === statusKey) tasks.push(t);
                            });
                        });
                        renderTaskList(tasks, `${statusKey.replace('_', ' ')} - ${label}`);
                    }
                }
            },
            plotOptions: {
                bar: {
                    borderRadius: 6,
                    horizontal: false,
                    columnWidth: '55%'
                }
            },
            dataLabels: {
                enabled: true,
                style: {
                    fontSize: '15px'
                }
            },
            xaxis: {
                categories: labels.length ? labels : ['No department'],
                labels: { style: { fontSize: '14px' } }
            },
            yaxis: {
                labels: { style: { fontSize: '14px' } }
            },
            series: [{
                name: 'Tasks',
                data: data.length ? data : [0]
            }],
            colors: colors.length ? colors : ['#cccccc'],
            legend: { show: false }
        };
        document.querySelector(containerId).innerHTML = "";
        var chart = new ApexCharts(document.querySelector(containerId), options);
        chart.render();
    }

    function renderDueDatesChart() {
        var options = {
            chart: {
                type: 'bar',
                height: 300,
                toolbar: { show: false },
                events: {
                    dataPointSelection: function(event, chartContext, config) {
                        const date = dueDatesLabels[config.dataPointIndex];
                        // Find tasks for this due date
                        const tasks = [];
                        Object.values(tasksByStatus).forEach(arr => {
                            arr.forEach(t => {
                                if (t.due_date === date) tasks.push(t);
                            });
                        });
                        renderTaskList(tasks, `Due date: ${date}`);
                    }
                }
            },
            series: [{
                name: 'Tasks',
                data: dueDatesCounts
            }],
            xaxis: {
                categories: dueDatesLabels,
                labels: { style: { fontSize: '13px' }, rotate: -45 }
            },
            yaxis: {
                labels: { style: { fontSize: '13px' } }
            },
            dataLabels: {
                enabled: true,
                style: { fontSize: '13px' }
            },
            colors: ['#845ec2'],
            legend: { show: false }
        };
        document.querySelector("#chartDueDates").innerHTML = "";
        var chart = new ApexCharts(document.querySelector("#chartDueDates"), options);
        chart.render();
    }

    document.addEventListener('DOMContentLoaded', function() {
        [
            'chartCard',
            'chartCardAssigned',
            'chartCardInProgress',
            'chartCardUnderReview',
            'chartCardCompleted'
        ].forEach(function(id) {
            var el = document.getElementById(id);
            if (el) el.classList.add('visible');
        });

        if (document.getElementById('chartAssigned')) {
            renderDepartmentChart("#chartAssigned", "assigned");
        }
        if (document.getElementById('chartInProgress')) {
            renderDepartmentChart("#chartInProgress", "in_progress");
        }
        if (document.getElementById('chartUnderReview')) {
            renderDepartmentChart("#chartUnderReview", "under_review");
        }
        if (document.getElementById('chartCompleted')) {
            renderDepartmentChart("#chartCompleted", "completed");
        }
        if (document.getElementById('chartDueDates')) {
            renderDueDatesChart();
            document.getElementById('chartCardDueDates').classList.add('visible');
        }
    });

    // Drag and drop for chart cards
    const container = document.getElementById('chartsContainer');
    let dragged = null;

    container.querySelectorAll('.chart-draggable').forEach(card => {
        card.addEventListener('dragstart', function(e) {
            dragged = card;
            card.classList.add('dragging');
            e.dataTransfer.effectAllowed = 'move';
        });
        card.addEventListener('dragend', function() {
            dragged = null;
            card.classList.remove('dragging');
        });
        card.addEventListener('dragover', function(e) {
            e.preventDefault();
        });
        card.addEventListener('drop', function(e) {
            e.preventDefault();
            if (dragged && dragged !== card) {
                if (card.nextSibling === dragged) {
                    container.insertBefore(dragged, card);
                } else {
                    container.insertBefore(dragged, card.nextSibling);
                }
            }
        });
    });

    // Allow drop on the container to move to the end
    container.addEventListener('dragover', function(e) { e.preventDefault(); });
    container.addEventListener('drop', function(e) {
        e.preventDefault();
        if (dragged) {
            container.appendChild(dragged);
        }
    });

    // ECharts Heatmap
    function renderEchartsHeatmap() {
        var chartDom = document.getElementById('echarts-heatmap');
        var myChart = echarts.init(chartDom);

        var option = {
            tooltip: {
                position: 'top',
                formatter: function (p) {
                    return `${p.value[0]}: <b>${p.value[1]}</b> tasks`;
                }
            },
            visualMap: {
                min: 0,
                max: Math.max(...dueDatesHeatmapEcharts.map(d => d[1]), 5),
                calculable: true,
                orient: 'horizontal',
                left: 'center',
                bottom: 10,
                inRange: {
                    color: ['#e0e7ff', '#4338ca']
                }
            },
            calendar: {
                range: [dueDatesHeatmapEcharts.length ? dueDatesHeatmapEcharts[0][0].slice(0, 7) : '2025-01', 
                        dueDatesHeatmapEcharts.length ? dueDatesHeatmapEcharts[dueDatesHeatmapEcharts.length-1][0].slice(0, 7) : '2025-12'],
                cellSize: ['auto', 20],
                splitLine: { show: false },
                itemStyle: { borderWidth: 0.5 }
            },
            series: [{
                type: 'heatmap',
                coordinateSystem: 'calendar',
                data: dueDatesHeatmapEcharts
            }]
        };

        myChart.setOption(option);

        // Click event to show tasks for a specific date
        myChart.on('click', function(params) {
            const date = params.value[0];
            const tasks = [];
            Object.values(tasksByStatus).forEach(arr => {
                arr.forEach(t => {
                    if (t.due_date === date) tasks.push(t);
                });
            });
            renderTaskList(tasks, `Due date: ${date}`);
        });
    }

    document.addEventListener('DOMContentLoaded', function() {
        if (document.getElementById('echarts-heatmap')) {
            renderEchartsHeatmap();
            document.getElementById('chartCardEchartsHeatmap').classList.add('visible');
        }
    });
</script>
{% endblock %}