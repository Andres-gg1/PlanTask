{% extends "layout.jinja2" %}

{% block title %}{{ form_config.title }}{% endblock %}

{% block styles %}
<link rel="stylesheet" href="{{ request.static_url('plantask:static/styles/create-form.css') }}">
<style>
    /* Dynamic CSS variables for form theming */
    .form-card::before {
        background: {{ form_config.gradient }};
    }
    
    .form-icon {
        background: {{ form_config.gradient }};
    }
    
    .form-control:focus {
        border-color: {{ form_config.accent_color }};
        box-shadow: 0 0 0 3px {{ form_config.accent_color }}15;
    }
    
    .btn-create {
        background: {{ form_config.gradient }};
    }
    
    .date-display-input:focus {
        border-color: {{ form_config.accent_color }};
        box-shadow: 0 0 0 3px {{ form_config.accent_color }}15;
        background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' fill='{{ form_config.accent_color | replace('#', '%23') }}' viewBox='0 0 16 16'%3E%3Cpath d='M3.5 0a.5.5 0 0 1 .5.5V1h8V.5a.5.5 0 0 1 1 0V1h1a2 2 0 0 1 2 2v11a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h1V.5a.5.5 0 0 1 .5-.5zM1 4v10a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V4H1z'/%3E%3C/svg%3E");
    }
    
    .calendar-header {
        background: {{ form_config.gradient }};
    }
    
    .calendar-day:hover {
        background: {{ form_config.accent_color }}15;
    }
    
    .calendar-day.selected {
        background: {{ form_config.gradient }};
    }
</style>
{% endblock %}

{% block content %}
<main class="create-container">
    <div class="form-card">
        <div class="form-header">
            <div class="form-icon">
                <i class="{{ form_config.icon }}"></i>
            </div>
            <h1 class="form-title">{{ form_config.title }}</h1>
            <p class="form-subtitle">{{ form_config.subtitle }}</p>
        </div>

        <div class="form-body">
            <form action="{{ form_config.action }}" method="POST" id="createForm">
                <input type="hidden" name="csrf_token" value="{{ csrf_token }}">
                
                <div class="form-group">
                    <label for="name" class="form-label">{{ form_config.name_label }}</label>
                    <input 
                        type="text" 
                        id="name" 
                        name="name" 
                        class="form-control" 
                        placeholder="{{ form_config.name_placeholder }}"
                        required 
                        maxlength="55"
                        autocomplete="off"
                    >
                </div>

                <div class="form-group">
                    <label for="description" class="form-label">Description</label>
                    <textarea 
                        id="description" 
                        name="description" 
                        class="form-control" 
                        placeholder="{{ form_config.description_placeholder }}"
                        required 
                        maxlength="150"
                    ></textarea>
                </div>

                {% if form_config.show_date %}
                <div class="form-group">
                    <label for="due_date" class="form-label">Due Date</label>
                    <div class="custom-date-picker">
                        <input 
                            type="text" 
                            id="due_date_display" 
                            class="date-display-input" 
                            placeholder="Select a date"
                            readonly
                        >
                        <input 
                            type="date" 
                            id="due_date" 
                            name="due_date" 
                            class="hidden-date-input" 
                            required 
                            min="{{ current_date }}"
                            {% if form_config.max_date %}max="{{ form_config.max_date }}"{% endif %}
                        >
                        <div class="calendar-dropdown" id="calendar-dropdown">
                            <div class="calendar-header">
                                <button type="button" class="calendar-nav-btn" id="prev-month">
                                    <i class="bi bi-chevron-left"></i>
                                </button>
                                <div class="calendar-month-year" id="month-year"></div>
                                <button type="button" class="calendar-nav-btn" id="next-month">
                                    <i class="bi bi-chevron-right"></i>
                                </button>
                            </div>
                            <div class="calendar-grid">
                                <div class="calendar-weekdays">
                                    <div class="calendar-weekday">Sun</div>
                                    <div class="calendar-weekday">Mon</div>
                                    <div class="calendar-weekday">Tue</div>
                                    <div class="calendar-weekday">Wed</div>
                                    <div class="calendar-weekday">Thu</div>
                                    <div class="calendar-weekday">Fri</div>
                                    <div class="calendar-weekday">Sat</div>
                                </div>
                                <div class="calendar-days" id="calendar-days"></div>
                            </div>
                        </div>
                    </div>
                </div>
                {% endif %}

                <button type="submit" class="btn-create">
                    <i class="{{ form_config.icon }}"></i>
                    {{ form_config.button_text }}
                </button>
            </form>

            {% if error_ping %}
            <div class="error-alert">
                <i class="bi bi-exclamation-triangle-fill"></i>
                <span>{{ error_ping }}</span>
            </div>
            {% endif %}
        </div>
    </div>
</main>
{% endblock %}

{% block scripts %}
<script>
    document.addEventListener('DOMContentLoaded', function() {
        const form = document.getElementById('createForm');
        const inputs = form.querySelectorAll('.form-control');
        const submitBtn = form.querySelector('.btn-create');
        
        // Basic form validation
        inputs.forEach(input => {
            input.addEventListener('input', function() {
                validateInput(this);
            });
        });

        function validateInput(input) {
            const isValid = input.checkValidity();
            
            if (input.value.length > 0) {
                if (isValid) {
                    input.style.borderColor = '#10b981';
                } else {
                    input.style.borderColor = '#ef4444';
                }
            } else {
                input.style.borderColor = '#d1d5db';
            }
        }

        // Form submission with loading state
        form.addEventListener('submit', function(e) {
            let isFormValid = true;
            inputs.forEach(input => {
                if (!input.checkValidity()) {
                    isFormValid = false;
                    validateInput(input);
                }
            });
            
            if (!isFormValid) {
                e.preventDefault();
                return;
            }
            
            // Show loading state
            submitBtn.innerHTML = '<span class="loading-spinner"></span>Creating...';
            submitBtn.disabled = true;
        });

        // Character counter for description
        const descriptionField = document.getElementById('description');
        if (descriptionField) {
            const parent = descriptionField.parentElement;
            const charCount = document.createElement('div');
            charCount.className = 'char-counter';
            parent.style.position = 'relative';
            parent.appendChild(charCount);
            
            function updateCharCount() {
                const current = descriptionField.value.length;
                const max = 150;
                
                charCount.textContent = `${current}/${max}`;
                
                charCount.classList.remove('warning', 'danger');
                if (max - current < 20) {
                    charCount.classList.add('warning');
                }
                if (max - current < 5) {
                    charCount.classList.add('danger');
                }
            }
            
            descriptionField.addEventListener('input', updateCharCount);
            updateCharCount();
        }

        // Custom Calendar Implementation
        const dateDisplayInput = document.getElementById('due_date_display');
        const hiddenDateInput = document.getElementById('due_date');
        const calendarDropdown = document.getElementById('calendar-dropdown');
        const monthYearDisplay = document.getElementById('month-year');
        const calendarDays = document.getElementById('calendar-days');
        const prevMonthBtn = document.getElementById('prev-month');
        const nextMonthBtn = document.getElementById('next-month');

        if (dateDisplayInput && calendarDropdown) {
            let currentDate = new Date();
            let selectedDate = null;
            
            const minDate = new Date('{{ current_date }}');
            {% if form_config.max_date %}
            const maxDate = new Date('{{ form_config.max_date }}');
            {% else %}
            const maxDate = null;
            {% endif %}

            const months = [
                'January', 'February', 'March', 'April', 'May', 'June',
                'July', 'August', 'September', 'October', 'November', 'December'
            ];

            function formatDate(date) {
                const year = date.getFullYear();
                const month = String(date.getMonth() + 1).padStart(2, '0');
                const day = String(date.getDate()).padStart(2, '0');
                return `${year}-${month}-${day}`;
            }

            function formatDisplayDate(date) {
                const options = { year: 'numeric', month: 'long', day: 'numeric' };
                return date.toLocaleDateString('en-US', options);
            }

            function isDateDisabled(date) {
                if (date < minDate) return true;
                if (maxDate && date > maxDate) return true;
                return false;
            }

            function updateCalendar() {
                const year = currentDate.getFullYear();
                const month = currentDate.getMonth();
                
                monthYearDisplay.textContent = `${months[month]} ${year}`;
                
                const firstDay = new Date(year, month, 1);
                const lastDay = new Date(year, month + 1, 0);
                const startDate = new Date(firstDay);
                startDate.setDate(startDate.getDate() - firstDay.getDay());
                
                calendarDays.innerHTML = '';
                
                for (let i = 0; i < 42; i++) {
                    const date = new Date(startDate);
                    date.setDate(startDate.getDate() + i);
                    
                    const dayElement = document.createElement('div');
                    dayElement.className = 'calendar-day';
                    dayElement.textContent = date.getDate();
                    
                    if (date.getMonth() !== month) {
                        dayElement.classList.add('other-month');
                    }
                    
                    if (isDateDisabled(date)) {
                        dayElement.classList.add('disabled');
                    } else {
                        dayElement.addEventListener('click', () => selectDate(date));
                    }
                    
                    if (selectedDate && date.toDateString() === selectedDate.toDateString()) {
                        dayElement.classList.add('selected');
                    }
                    
                    if (date.toDateString() === new Date().toDateString()) {
                        dayElement.classList.add('today');
                    }
                    
                    calendarDays.appendChild(dayElement);
                }
            }

            function selectDate(date) {
                selectedDate = date;
                dateDisplayInput.value = formatDisplayDate(date);
                hiddenDateInput.value = formatDate(date);
                
                // Trigger validation
                validateInput(hiddenDateInput);
                
                hideCalendar();
            }

            function showCalendar() {
                calendarDropdown.classList.add('show');
                updateCalendar();
            }

            function hideCalendar() {
                calendarDropdown.classList.remove('show');
            }

            // Event listeners
            dateDisplayInput.addEventListener('click', showCalendar);
            dateDisplayInput.addEventListener('focus', showCalendar);

            prevMonthBtn.addEventListener('click', () => {
                currentDate.setMonth(currentDate.getMonth() - 1);
                updateCalendar();
            });

            nextMonthBtn.addEventListener('click', () => {
                currentDate.setMonth(currentDate.getMonth() + 1);
                updateCalendar();
            });

            // Close calendar when clicking outside
            document.addEventListener('click', (e) => {
                if (!e.target.closest('.custom-date-picker')) {
                    hideCalendar();
                }
            });

            // Initialize calendar
            updateCalendar();
        }
    });
</script>
{% endblock %}
