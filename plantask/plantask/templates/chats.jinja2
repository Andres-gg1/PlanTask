{% extends "layout.jinja2" %}

{% block title %}Chats{% endblock %}

{% block styles %}
<link href="{{ request.static_url('plantask:static/styles/chats.css') }}" rel="stylesheet">
{% endblock %}

{% block content %}
<div class="main-layout">
  <main class="mycontainer" style="display: flex;">
    <aside class="left-sidebar">
      <h1 style="margin-bottom: 1rem;">My Chats</h1> 
      <div class="search-container">
        <input type="text" id="chats-search" class="chats-search" placeholder="Filter by name">
        <i class="bi-search search-icon"></i>
      </div>
      <div class="chats-scroll-area">
        {% if chats %}
        <ul class="list-group mb-4" id="chats-list">
          {% for f in chats %}
            <li class="list-group-item justify-content-between align-items-center chat-item" 
                data-chat-id="{{ f.chat_id }}" 
                data-first-name="{{ f.first_name | lower }}" 
                data-last-name="{{ f.last_name | lower }}" 
                data-username="{{ f.username | lower }}">
              <div style="cursor:pointer; display: flex; align-items: center;">
                {% if f.image_route %}
                  <img src="{{ f.image_route }}" 
                  style="width: 2.5rem; height: 2.5rem; border-radius: 50%; object-fit: cover; display: inline-block; margin-right: 1rem;">
                {% else %}
                  <img src="{{ request.static_url('plantask:static/default_pfp.svg') }}" 
                  style="width: 2.5rem; height: 2.5rem; border-radius: 50%; object-fit: cover; display: inline-block; margin-right: 1rem;">
                {% endif %}
                <div style="display: flex; flex-direction: column;">
                  <span style="font-weight: bold; margin-right: 1rem;">{{ f.first_name }} {{ f.last_name }}</span>
                  <span class="text-muted">@{{ f.username }}</span>
                </div>
              </div>
            </li>
          {% endfor %}
        </ul>
        {% else %}
          <p>No chats available</p>
        {% endif %}
      </div>
    </aside>
    <section class="chat-messages" style="flex: 1 1 0; min-width: 0; display: flex; flex-direction: column;">
      <div class="ChatInfo" style="display: none;">
        <i class="bi-person-circle fs-1"></i>
        <h4 style="margin: 0 1rem; flex: 1;">Username</h4>
        <i class="bi-three-dots-vertical fs-1" style="margin-left: auto; margin-right:0.5rem"></i>
      </div>

      <div class="messages">
        <p class="empty-message-hint" style="text-align:center; color:#aaa;">Select a chat to view messages</p>
      </div>

      <form id="message-form" method="post" action="/send-message" style="display: none;">
        <div class="chat-input-bar">
          <input type="hidden" name="chat_id" id="chat-id-field">
          <input type="hidden" name="is_personal_chat" id="is-personal-chat-field">
          <input type="hidden" name="csrf_token" value="{{ csrf_token }}">
          <i class="bi-person-circle user-icon"></i>
          <input type="text" id="message-input" name="message-input" class="chat-input" placeholder="Write a message" />
          <i class="bi-paperclip attach-icon"></i>
          <button class="send-button">
            Send <i class="bi-send"></i>
          </button>
        </div>
      </form>
    </section>
  </main>
</div>
{% endblock %}

{% block scripts %}
<script>
  document.addEventListener('DOMContentLoaded', () => {
    const messagesContainer = document.querySelector('.messages');

    function scrollToBottom() {
      messagesContainer.scrollTop = messagesContainer.scrollHeight;
    }

    // Scroll to the bottom on page load
    scrollToBottom();

    // Scroll to the bottom when new messages are added
    const observer = new MutationObserver(() => {
      scrollToBottom();
    });
    observer.observe(messagesContainer, { childList: true, subtree: true });

    // Optional: Scroll to the bottom when the input field is focused
    const chatInput = document.querySelector('.chat-input');
    chatInput.addEventListener('focus', scrollToBottom);
  });
</script>
<script>
  document.addEventListener('DOMContentLoaded', () => {
    const searchInput = document.getElementById('chats-search');
    const chatItems = document.querySelectorAll('.chat-item');

    searchInput.addEventListener('input', () => {
      const filter = searchInput.value.toLowerCase();

      chatItems.forEach(item => {
        const firstName = item.getAttribute('data-first-name');
        const lastName = item.getAttribute('data-last-name');
        const username = item.getAttribute('data-username');

        if (
          firstName.includes(filter) || 
          lastName.includes(filter) || 
          username.includes(filter)
        ) {
          item.style.display = 'flex'; // Show matching items
        } else {
          item.style.display = 'none'; // Hide non-matching items
        }
      });
    });
  });
</script>
<script>
  document.addEventListener('DOMContentLoaded', () => {
    const chatItems = document.querySelectorAll('.chat-item');

    chatItems.forEach(item => {
      item.addEventListener('click', () => {
        chatItems.forEach(chat => chat.classList.remove('active'));
        item.classList.add('active');
      });
    });
  });
</script><script>
  const userId = {{ request.session.user_id }};

  document.addEventListener('DOMContentLoaded', () => {
    const chatItems = document.querySelectorAll('.chat-item');
    const messagesContainer = document.querySelector('.messages');
    const chatInfo = document.querySelector('.ChatInfo h4');
    const chatIdField = document.getElementById('chat-id-field');
    const isPersonalField = document.getElementById('is-personal-chat-field');
    const messageForm = document.getElementById('message-form');
    const messageInput = document.getElementById('message-input');

    let currentChatId = null;

    function renderMessages(messages) {
      const chatInfoBlock = document.querySelector('.ChatInfo');
      const inputForm = document.getElementById('message-form');
      const emptyHint = document.querySelector('.empty-message-hint');

      // Show chat info and input
      chatInfoBlock.style.display = 'flex';
      inputForm.style.display = 'block';

      messagesContainer.innerHTML = '';

      if (messages.length === 0) {
        messagesContainer.innerHTML = '<p style="text-align:center; color:#aaa;">No messages yet</p>';
        return;
      }

      messages.forEach(msg => {
        const isMine = msg.sender_id === userId;
        const messageDiv = document.createElement('div');
        messageDiv.className = isMine ? 'mymessage' : 'amessage';

        messageDiv.innerHTML = `
          <p style="margin-bottom: 0">${new Date(msg.date_sent).toLocaleString()}</p>
          <p class="${isMine ? 'mymessagebubble' : 'amessagebubble'}">
            ${msg.message_cont}
          </p>
          ${isMine ? '<i class="bi-check2-all"></i>' : ''}
        `;
        messagesContainer.appendChild(messageDiv);
      });

      messagesContainer.scrollTop = messagesContainer.scrollHeight;
    }

    async function fetchAndRenderMessages(chatId) {
      try {
        const response = await fetch(`/get-personal-chat-messages/${chatId}`);
        const data = await response.json();
        const messages = data.messages || [];

        renderMessages(messages);
      } catch (error) {
        console.error('Auto-refresh error:', error);
      }
    }

    // Manual chat click
    chatItems.forEach(item => {
      item.addEventListener('click', async () => {
        const chatId = item.getAttribute('data-chat-id');
        const username = item.querySelector('.text-muted').textContent;

        chatInfo.textContent = username;
        currentChatId = chatId;

        // Update form hidden fields
        chatIdField.value = chatId;
        isPersonalField.value = 'true';

        await fetchAndRenderMessages(chatId); // Initial load
      });
    });

    // Auto-refresh every 3 seconds if a chat is selected
    setInterval(() => {
      if (currentChatId) {
        fetchAndRenderMessages(currentChatId);
      }
    }, 3000);

    // âœ¨ Handle message form submission
    messageForm.addEventListener('submit', async (e) => {
      e.preventDefault();

      const chatId = chatIdField.value;
      const messageContent = messageInput.value.trim();

      if (!messageContent) return;

      try {
        const formData = new FormData(messageForm);
        const response = await fetch('/send-message', {
          method: 'POST',
          body: formData
        });

        const result = await response.json();

        if (result.success) {
          messageInput.value = '';
          await fetchAndRenderMessages(chatId);
        } else {
          console.error('Send error:', result.error_ping || 'Unknown error');
        }
      } catch (err) {
        console.error('Send failed:', err);
      }
    });
  });
</script>

{% endblock %}