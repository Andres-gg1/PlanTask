{% extends "layout.jinja2" %}

{% block title %}Chats{% endblock %}

{% block styles %}
<link href="{{ request.static_url('plantask:static/styles/chats.css') }}" rel="stylesheet">
{% endblock %}

{% block content %}
<div class="main-layout">
  <main class="mycontainer d-flex">
    <aside class="left-sidebar">
      <div class="d-flex justify-content-between align-items-center mb-3">
        <h1 class="mb-0">My Chats</h1>
        <button
          class="groupchatbtn btn btn-primary"
          id="new-chat-btn">
          <i class="bi-plus-lg"></i>
        </button>
      </div>

      <div class="search-container">
        <input type="text" id="chats-search" class="chats-search" placeholder="Filter by name">
        <i class="bi-search search-icon"></i>
      </div>

      <div class="chats-scroll-area">
        {% if chats %}
        <ul class="list-group mb-4" id="chats-list">
          {% for f in chats %}
          <li class="list-group-item chat-item d-flex align-items-center"
              data-chat-id="{{ f.chat_id }}"
              data-other-user-id="{{ f.other_user_id }}"
              data-first-name="{{ f.first_name | lower }}"
              data-last-name="{{ f.last_name | lower }}"
              data-username="{{ f.username | lower }}"
              data-image-route="{{ f.image_route or '' }}">
            <img src="{{ f.image_route or request.static_url('plantask:static/default_pfp.svg') }}"
                 class="rounded-circle me-3" style="width: 2.5rem; height: 2.5rem; object-fit: cover;">
            <div>
              <span class="fw-bold">{{ f.first_name }} {{ f.last_name }}</span><br>
              <span class="text-muted">@{{ f.username }}</span>
            </div>
          </li>
          {% endfor %}
        </ul>
        {% else %}
        <p>No chats available</p>
        {% endif %}
      </div>
    </aside>

    <section class="chat-messages flex-grow-1 d-flex flex-column" style="min-width: 0;">
      <div class="ChatInfo d-none align-items-center">
        <img class="chatinfo-pfp rounded-circle me-3"
             src="{{ request.static_url('plantask:static/default_pfp.svg') }}"
             style="width: 3rem; height: 3rem; object-fit: cover; cursor: pointer;">
        <div class="cursor-pointer">
          <h4 class="mb-0 fw-bold">Full Name</h4>
          <a class="text-muted">@username</a>
        </div>
        {% if group_chat %}
        <i class="bi-three-dots-vertical fs-1 ms-auto me-2"></i>
        {% endif %}
      </div>

      <div class="messages text-center text-muted">
        <p class="empty-message-hint">Select a chat to view messages</p>
      </div>

      <button id="scroll-to-bottom-btn" class="scroll-to-bottom-btn">
        Scroll to bottom <i class="bi-arrow-down"></i>
      </button>

      <form id="message-form" method="post" action="/send-message" class="d-none">
        <div class="chat-input-bar">
          <input type="hidden" name="chat_id" id="chat-id-field">
          <input type="hidden" name="is_personal_chat" id="is-personal-chat-field">
          <input type="hidden" name="csrf_token" value="{{ csrf_token }}">
          <img src="{{ user.pfp or request.static_url('plantask:static/default_pfp.svg') }}"
               class="rounded-circle me-2" style="width: 24px; height: 24px; object-fit: cover;">
          <input type="text" id="message-input" name="message-input" class="chat-input" placeholder="Write a message">
          <i class="bi-paperclip attach-icon"></i>
          <button class="send-button">Send <i class="bi-send"></i></button>
        </div>
      </form>
    </section>
  </main>
</div>

<!-- Create group modal -->
<div class="modal fade show-modal" id="createGroupModal" tabindex="-1" aria-labelledby="createGroupModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <form method="POST" action="{{ request.route_url('create_group_chat') }}">
      <input type="hidden" name="csrf_token" value="{{ csrf_token }}">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="createGroupModalLabel">Create Group Chat</h5>
        </div>
        <div class="modal-body">
          <div class="mb-3">
            <label class="form-label">Group Name</label>
            <input type="text" class="form-control" name="group_name" required>
          </div>

          <div class="mb-3">
            <label class="form-label">Search Users</label>
            <input type="text" class="form-control" id="groupUserSearch" placeholder="Enter name or username">
            <small class="text-muted">Minimum 2 characters</small>
            <div id="groupUserResults" class="mt-2"></div>
          </div>

          <div class="mb-3">
            <label class="form-label">Selected Users</label>
            <ul id="groupSelectedUsers" class="list-group"></ul>
            <div id="groupHiddenInputs"></div>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
          <button type="submit" class="btn btn-success" id="createGroupSubmit" disabled>Create Group</button>
        </div>
      </div>
    </form>
  </div>
</div>
{% endblock %}

{% block scripts %}
<script src="{{ request.static_url('plantask:static/scripts/chats.js') }}"></script>
<script>
document.addEventListener('DOMContentLoaded', () => {
  let groupSelected = [];

  const groupUserSearch = document.getElementById('groupUserSearch');
  const groupUserResults = document.getElementById('groupUserResults');

  document.getElementById('new-chat-btn').addEventListener('click', () => {
    groupSelected = [];
    groupUserSearch.value = '';
    groupUserResults.innerHTML = '';
    document.getElementById('groupSelectedUsers').innerHTML = "<li class='text-muted list-group-item'>No users selected</li>";
    document.getElementById('groupHiddenInputs').innerHTML = '';
    document.getElementById('createGroupSubmit').disabled = true;
    document.activeElement.blur();
    new bootstrap.Modal(document.getElementById('createGroupModal')).show();
  });

  groupUserSearch.addEventListener('input', async function () {
  const value = this.value.trim();
  if (value.length < 2) return;

  try {
    const res = await fetch(`/search-users-global?q=${encodeURIComponent(value)}`);
    const users = await res.json();

    groupUserResults.innerHTML = "";

    if (!users.length) {
      groupUserResults.innerHTML = `<p class="text-muted">No users found</p>`;
      return;
    }

    users.forEach(user => {
      if (groupSelected.some(u => u.id === user.id)) return;

      const wrapper = document.createElement('div');
      wrapper.className = "d-flex justify-content-between align-items-center border rounded p-2 mb-2";

      wrapper.innerHTML = `
        <div class="d-flex align-items-center">
          <img src="${user.image_route || '{{ request.static_url('plantask:static/default_pfp.svg') }}'}"
               class="rounded-circle me-2" style="width: 2.5rem; height: 2.5rem; object-fit: cover;">
          <div>
            <strong>${user.first_name} ${user.last_name}</strong><br>
            <small class="text-muted">@${user.username}</small>
          </div>
        </div>
        <button class="btn btn-sm btn-success ms-2">Add</button>
      `;

      wrapper.querySelector('button').addEventListener('click', () => {
        groupSelected.push(user);
        updateGroupSelected();
        wrapper.remove(); // quita al usuario ya seleccionado de los resultados
      });

      groupUserResults.appendChild(wrapper);
    });
  } catch (err) {
    console.error("‚ùå Fetch failed:", err);
    groupUserResults.innerHTML = `<p class="text-danger">Error fetching users</p>`;
  }
});

  function updateGroupSelected() {
    const list = document.getElementById('groupSelectedUsers');
    const hidden = document.getElementById('groupHiddenInputs');
    const submit = document.getElementById('createGroupSubmit');

    list.innerHTML = '';
    hidden.innerHTML = '';

    if (groupSelected.length === 0) {
      list.innerHTML = "<li class='text-muted list-group-item'>No users selected</li>";
      submit.disabled = true;
      return;
    }

    groupSelected.forEach(u => {
      const li = document.createElement('li');
      li.className = "list-group-item d-flex justify-content-between align-items-center";
      li.innerHTML = `
        <div>
          <strong>${u.first_name} ${u.last_name}</strong> <small class="text-muted">@${u.username}</small>
        </div>
        <button class="btn btn-sm btn-outline-danger">Remove</button>
      `;
      li.querySelector('button').addEventListener('click', () => {
        groupSelected = groupSelected.filter(x => x.id !== u.id);
        updateGroupSelected();
      });
      list.appendChild(li);

      const hiddenInput = document.createElement('input');
      hiddenInput.type = 'hidden';
      hiddenInput.name = 'user_ids';
      hiddenInput.value = u.id;
      hidden.appendChild(hiddenInput);
    });

    submit.disabled = groupSelected.length < 2;
  }

  // === PERSONAL CHAT HANDLING ===
  const urlParams = new URLSearchParams(window.location.search);
  const initialChatId = urlParams.get('currentChatId');
  const userId = {{ request.session.user_id }};
  const chatItems = document.querySelectorAll('.chat-item');
  const messagesContainer = document.querySelector('.messages');
  const chatInfo = document.querySelector('.ChatInfo');
  const chatIdField = document.getElementById('chat-id-field');
  const isPersonalField = document.getElementById('is-personal-chat-field');
  const messageForm = document.getElementById('message-form');
  const messageInput = document.getElementById('message-input');
  const scrollBtn = document.getElementById('scroll-to-bottom-btn');
  let currentChatId = null;

  const scrollToBottom = () => {
    messagesContainer.scrollTo({ top: messagesContainer.scrollHeight, behavior: 'smooth' });
  };

  const handleScrollButtonVisibility = () => {
    const threshold = 100;
    const atBottom = messagesContainer.scrollHeight - messagesContainer.scrollTop - messagesContainer.clientHeight < threshold;
    scrollBtn.style.display = atBottom ? 'none' : 'block';
  };

  scrollBtn.addEventListener('click', scrollToBottom);
  messagesContainer.addEventListener('scroll', handleScrollButtonVisibility);

  const renderMessages = (messages) => {
    chatInfo.classList.remove('d-none');
    messageForm.classList.remove('d-none');
    messagesContainer.innerHTML = "";

    if (!messages.length) {
      messagesContainer.innerHTML = '<p style="text-align:center; color:#aaa;">No messages yet</p>';
      return;
    }

    let lastRenderedDate = null;

    messages.forEach(msg => {
      const dateObj = new Date(msg.date_sent);
      const fechaDia = dateObj.toLocaleDateString(undefined, { year: 'numeric', month: 'short', day: 'numeric' });
      const hora = dateObj.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });

      if (fechaDia !== lastRenderedDate) {
        const dateDivider = document.createElement('div');
        dateDivider.className = "date-divider text-muted my-2";
        dateDivider.textContent = fechaDia;
        messagesContainer.appendChild(dateDivider);
        lastRenderedDate = fechaDia;
      }

      const msgWrapper = document.createElement('div');
      msgWrapper.className = msg.sender_id === userId ? 'mymessage' : 'amessage';

      msgWrapper.innerHTML = `
        <p class="message-info">${hora}</p>
        <p class="${msg.sender_id === userId ? 'mymessagebubble' : 'amessagebubble'}">${msg.message_cont}</p>
        ${msg.sender_id === userId ? `<i class="bi ${msg.state === 'read' ? 'bi-check2-all' : 'bi-check2'}"></i>` : ''}
      `;

      messagesContainer.appendChild(msgWrapper);
    });

    scrollToBottom();
    handleScrollButtonVisibility();
  };

  const fetchAndRenderMessages = async (chatId) => {
    try {
      const res = await fetch(`/get-chat-messages/${chatId}`);
      const data = await res.json();
      renderMessages(data.messages || []);
    } catch (err) {
      console.error('Fetch error:', err);
    }
  };

  chatItems.forEach(item => {
    item.addEventListener('click', async () => {
      chatItems.forEach(el => el.classList.remove('active'));
      item.classList.add('active');

      const { chatId, firstName, lastName, username, imageRoute, otherUserId } = item.dataset;
      const cap = s => s.charAt(0).toUpperCase() + s.slice(1);

      chatIdField.value = chatId;
      isPersonalField.value = 'true';
      currentChatId = chatId;

      chatInfo.querySelector('.chatinfo-pfp').src = imageRoute || "{{ request.static_url('plantask:static/default_pfp.svg') }}";
      chatInfo.querySelector('h4').textContent = `${cap(firstName)} ${cap(lastName)}`;
      chatInfo.querySelector('a').textContent = `@${username}`;

      ['.chatinfo-pfp', 'h4', 'a'].forEach(selector => {
        chatInfo.querySelector(selector).onclick = () => window.location.href = `/user/${otherUserId}`;
      });

      await fetchAndRenderMessages(chatId);
    });
  });

  if (initialChatId) {
    const target = [...chatItems].find(i => i.dataset.chatId === initialChatId);
    if (target) target.click();
  } else {
    chatInfo.classList.add('d-none');
    messageForm.classList.add('d-none');
    messagesContainer.innerHTML = '<p class="text-center text-muted mt-4">Select a chat to view messages</p>';
  }

  setInterval(() => {
    if (!currentChatId) return;
    const distanceFromBottom = messagesContainer.scrollHeight - messagesContainer.scrollTop - messagesContainer.clientHeight;
    if (distanceFromBottom < 100) {
      fetchAndRenderMessages(currentChatId);
    }
  }, 3000);

  messageForm.addEventListener('submit', async e => {
    e.preventDefault();
    const message = messageInput.value.trim();
    if (!message) return;

    try {
      const formData = new FormData(messageForm);
      const res = await fetch('/send-message', { method: 'POST', body: formData });
      const data = await res.json();

      if (data.success) {
        messageInput.value = '';
        await fetchAndRenderMessages(currentChatId);
      } else {
        console.error('Send error:', data.error_ping || 'Unknown error');
      }
    } catch (err) {
      console.error('Send failed:', err);
    }
  });
});
</script>
{% endblock %}
