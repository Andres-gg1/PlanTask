{% extends "layout.jinja2" %}

{% block title %}{{task.task_title}}{% endblock %}

{% block styles %}
<link href="{{ request.static_url('plantask:static/styles/microtask.css') }}" rel="stylesheet">
<link href="{{ request.static_url('plantask:static/styles/tasks.css') }}" rel="stylesheet">
<link href="{{ request.static_url('plantask:static/styles/filetask.css') }}" rel="stylesheet">
{% endblock %}

{% block content %}
<div class="main-layout">
    <main class="mycontainer">
            <div style="display: flex; align-items: center; justify-content: space-between;">
                <h1 style="margin: 0;">{{ task.task_title }}</h1>
                <div class="label-list-scrollable">
                    {% for label_id, label_name, label_hex_color in labels %}
                        <div class="label" style="background-color: {{ label_hex_color }}; white-space: nowrap;">
                            {{ label_name }}
                        </div>
                    {% endfor %}
                </div>
                {% if role == 'admin' %}
                <button class="mybtn mybtn-gray" type="button" data-bs-toggle="modal" data-bs-target="#addLabelModal" aria-label="Add Label" title="Add Label">
                    Labels <i class="bi-plus-lg"></i>
                </button>
            {% endif %}
            </div>

        <h3><a class="project-name" href="{{ request.route_url('project_by_id', id=project.id) }}">{{ project.name }}</a></h3>

        <div class="info-row">
            <div class="info">Creation Date: {{ task.date_created.strftime('%Y-%m-%d') }}</div>
            <div class="info due-date">Due Date: {{ task.due_date.strftime('%Y-%m-%d') }}</div>

            {% if role == 'admin' %}
                <div class="admin-actions">
                    <button type="button" class="mybtn mybtn-blue" data-bs-toggle="modal" data-bs-target="#editTaskModal">
                        Edit Task <i class="bi-pencil-square"></i>
                    </button>
                    <button type="button" class="mybtn mybtn-red" data-bs-toggle="modal" data-bs-target="#deleteTaskModal">
                        Delete Task <i class="bi-trash3"></i>
                    </button>
                    <button class="mybtn mybtn-green" type="button" data-bs-toggle="modal" data-bs-target="#attachFileModal">
                        Attach File <i class="bi-paperclip"></i>
                    </button>
                </div>
            {% endif %}

            <div class="status-actions">
                {% if task.status == 'assigned' %}
                    <button class="mybtn mybtn-purple" type="button" id="movestatusbutton">
                        Move to In Progress <i class="bi-box-arrow-right"></i><i class="bi-pen-fill"></i>
                    </button>
                {% elif task.status == 'in_progress' %}
                    <button class="mybtn mybtn-purple" type="button" id="backtoassigned">
                        Back to Assigned <i class="bi-pin-angle-fill"></i><i class="bi-box-arrow-left"></i>
                    </button>
                    <button class="mybtn mybtn-purple" type="button" id="sendforreview">
                        Send for Review <i class="bi-box-arrow-right"></i><i class="bi-eye-fill"></i>
                    </button>
                {% elif task.status == 'under_review' %}
                    <button class="mybtn mybtn-purple" type="button" id="backtoinprogress">
                        Back to In Progress <i class="bi-pen-fill"></i><i class="bi-box-arrow-left"></i>
                    </button>
                    <button class="mybtn mybtn-purple" type="button" id="completetask">
                        Complete Task <i class="bi-box-arrow-right"></i><i class="bi-check-circle-fill"></i>
                    </button>
                {% elif task.status == 'completed' %}
                    <button class="mybtn mybtn-purple" type="button" id="backtoreview">
                        Back to In Review <i class="bi-eye-fill"></i><i class="bi-box-arrow-left"></i>
                    </button>
                {% endif %}
            </div>
        </div>

        <p class="info">{{ task.task_description }}</p>

        {% if microtasks %}
            <ul class="list-group mb-4">
                {% for mt in microtasks %}
                    <li class="list-group-item justify-content-between align-items-center microtask-list-item"
                        data-mtid="{{ mt.id }}"
                        data-name="{{ mt.name|e }}"
                        data-description="{{ mt.description|e }}"
                        data-status="{{ mt.status }}"
                        data-due="{{ mt.due_date.strftime('%Y-%m-%d') if mt.due_date else '' }}">
                        <div class="microtask-item" style="cursor:pointer;">
                            {% if mt.status == 'undone' %}
                                <i class="bi-square"></i>
                            {% elif mt.status == 'under_review' %}
                                <i class="bi-eye-fill"></i>
                            {% elif mt.status == 'approved' %}
                                <i class="bi-check-square-fill"></i>
                            {% endif %}
                            <strong>{{ mt.name }}</strong>
                        </div>
                    </li>
                {% endfor %}
            </ul>
        {% else %}
            <div class="alert alert-info">No microtasks assigned to this task.</div>
        {% endif %}

        {% if role == 'admin' %}
            <a href="{{ request.route_url('create_microtask', task_id=task_id) }}" class="create-microtask-button">
                Create New MicroTask <i class="bi-plus-lg"></i>
            </a>
        {% endif %}

        <div>
            <!-- Task Comments Section -->
            <div style="background-color: #f5f5f5; padding: 1rem; border-radius: 8px; margin-bottom: 1.5rem;">
            <div id="taskComments" style="margin-bottom: 1.5rem; overflow-y: auto; max-height: 300px; flex-grow: 1; padding-right: 0.5rem;">
                <!-- Comments will be loaded here -->
            </div>
            <!-- Comment Input -->
            <form id="taskCommentForm" autocomplete="off" style="display: flex; align-items: center; gap: 1rem; border: 1px solid #ddd; border-radius: 8px; padding: 0.5rem 1rem; background: white;">
                <input type="hidden" name="csrf_token" value="{{ csrf_token }}">
                <div style="width: 36px; height: 36px; border-radius: 50%; background: #eee; display: flex; align-items: center; justify-content: center; flex-shrink: 0;">
                {% if user.pfp %}
                    <img src="{{ user.pfp }}" 
                    style="width: 24px; height: 24px; border-radius: 50%; object-fit: cover; display: inline-block;">
                {% else %}
                    <img src="{{ request.static_url('plantask:static/default_pfp.svg') }}" 
                    style="width: 24px; height: 24px; border-radius: 50%; object-fit: cover; display: inline-block;">
                {% endif %}
                </div>
                <input type="text" id="taskCommentInput" class="form-control" name="content" placeholder="Write a comment" style="border: none; box-shadow: none; font-size: 1.1rem;">
                <button type="submit" id="submitTaskCommentButton" class="send-button"><i class="bi-send"></i></button>
            </form>
            </div>
        </div>
    </main>
    <aside class="right-sidebar">
        <h3>Files</h3>
        <div class="files-scroll-area">
            {% if files %}
            <ul class="list-group mb-4">
                {% for f in files %}
                <li class="list-group-item justify-content-between align-items-center">
                    <div class="file-item" style="cursor:pointer;">
                        <i class="bi-filetype-{{f.extension}} fs-1"></i>
                        <div style="display:flex; flex-direction:column; flex:2; min-width:0;">
                            <strong style="word-break: break-all; white-space: normal;">{{ f.filename }}</strong>
                            <span style="font-size:0.95em; color:#666;">
                            {{ f.creation_date.strftime('%Y-%m-%d %H:%M') }}
                            </span>
                        </div>
                        <button class="btn p-0 ms-auto download-btn" 
                                style="border:none; background:none; color:black;" 
                                title="Download"
                                data-filename="{{ f.filename }}"
                                data-file-id="{{ f.id }}">
                            <i class="bi-download fs-1"></i>
                        </button>
                    </div>
                </li>
                {% endfor %}
            </ul>
            {% else %}
                <div class="alert alert-info">No files attached to this task.</div>
            {% endif %}
        </div>
    </aside>
</div>

{% set relation_value = True %}
{% set task_id =  task.id %}
{% include "labels_modal.jinja2" %}

<!-- Edit Task Modal -->
<div class="modal fade" id="editTaskModal" tabindex="-1" aria-labelledby="editTaskModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <form method="POST" action="{{ request.route_url('edit_task', id=task.id) }}">
                <input type="hidden" name="csrf_token" value="{{ csrf_token }}">
                <div class="modal-header">
                    <h5 class="modal-title" id="editTaskModalLabel">Edit Task</h5>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="taskTitle" class="form-label">Task Title</label>
                        <input type="text" class="form-control" id="taskTitle" name="name" value="{{ task.task_title }}" maxlength="55">
                    </div>
                    <div class="mb-3">
                        <label for="taskDescription" class="form-label">Task Description</label>
                        <textarea class="form-control" id="taskDescription" name="description" maxlength="150">{{ task.task_description }}</textarea>
                    </div>
                    <div class="mb-3">
                        <label for="taskDueDate" class="form-label">Due Date</label>
                        <input type="date" class="form-control" id="taskDueDate" name="due_date" value="{{ task.due_date.strftime('%Y-%m-%d') }}" required min="{{ current_date }}">
                    </div>
                </div>
                <div class="modal-footer border-0">
                    <button type="button" class="btn mybtn-gray" data-bs-dismiss="modal">Close</button>
                    <button type="submit" class="btn mybtn-blue">Save Changes</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Delete Task Modal -->
<div class="modal fade" id="deleteTaskModal" tabindex="-1" aria-labelledby="deleteTaskModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <form method="POST" action="{{ request.route_url('delete_task', id=task.id) }}">
                <input type="hidden" name="csrf_token" value="{{ csrf_token }}">
                <div class="modal-header">
                    <h5 class="modal-title" id="deleteTaskModalLabel">Delete Task</h5>
                </div>
                <div class="modal-body">
                    Are you sure you want to delete the task "{{ task.task_title }}"?
                </div>
                <div class="modal-footer border-0">
                    <button type="button" class="btn mybtn-gray" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn mybtn-red">Delete</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Modal microtask -->
<div id="microtaskDetailsModal" class="custom-modal" aria-hidden="true" role="dialog" aria-labelledby="microtaskDetailsModalLabel" aria-modal="true" tabindex="-1">
  <div class="custom-modal-dialog" role="document" style="max-width: 1100px; min-width: 900px;">
    <div class="custom-modal-content" style="padding: 2.5rem 2.5rem 2rem 2.5rem; border-radius: 12px;">
      <div class="custom-modal-header" style="border-bottom: none; padding: 0; margin-bottom: 1.5rem;">
        <button type="button" class="custom-modal-close" aria-label="Close" style="position: absolute; right: 0.5rem; top: 0.5rem; background: none; border: none; font-size: 2rem; color: #888; z-index: 10;">
          <i class="bi-x-lg"></i>
        </button>
        <div style="display: flex; align-items: flex-start; justify-content: space-between; width: 100%;">
          <div>
            <div style="display: flex; align-items: center; gap: 1.5rem;">
                <span id="microtaskStatusIcon" class="fs-1"></span>
                <span id="microtaskName" style="font-size: 2rem; font-weight: 600;"></span>
                <span id="microtaskStatus" style="font-size: 1.1rem; color: #888; margin-left: 1rem;"></span>
            </div>
            <div style="display: flex; gap: 1.5rem; margin-top: 0.5rem; font-size: 1.1rem;">
              <a href="{{ request.route_url('task_by_id', id=task.id) }}" style="text-decoration: none; color: inherit; font-weight: 500;">Task: {{ task.task_title }}</a>
              <span style="color: #999;">|</span>
              <a href="{{ request.route_url('project_by_id', id=project.id) }}" style="text-decoration: none; color: inherit; font-weight: 500;">Project: {{ project.name }}</a>
            </div>
          </div>
          <div style="display: flex; flex-direction: column; align-items: flex-end; gap: 0.5rem; padding-right: 2rem !important;">
            <span id="microtaskDueDate" style="font-size: 1.1rem; color: #666;">Due Date</span>
            {% if role in ['admin', 'project_manager'] %}
              <!-- Admin/PM can see all status options -->
              <button class="btn btn-secondary" id="markReviewButton" style="background: rgb(118, 112, 151); color: #fff; border: none; border-radius: 6px; padding: 0.4rem 1.2rem; font-size: 1.1rem; font-weight: 500;">
                Mark for Review <i class="bi-eye-fill"></i>
              </button>
            {% else %}
              <!-- Regular users can only mark for review when status is undone -->
              <button class="btn btn-secondary" id="markReviewButton" style="background: rgb(118, 112, 151); color: #fff; border: none; border-radius: 6px; padding: 0.4rem 1.2rem; font-size: 1.1rem; font-weight: 500;"
                      {% if status != 'undone' %}style="display: none;"{% endif %}>
                Mark for Review <i class="bi-eye-fill"></i>
              </button>
            {% endif %}
          </div>
        </div>
      </div>
      <div class="custom-modal-body" style="padding: 0;">
        <div id="microtaskDescription" class="info" style="font-size: 1.2rem; margin-bottom: 2rem; margin-top: 1rem; color: #222;"></div>
        <!-- Attached Files Section -->
        <div id="microtaskFiles" style="display: flex; gap: 1.5rem; margin-bottom: 2rem;">
          
          <div class="file-card" style="border: 1px solid #ccc; border-radius: 8px; padding: 1rem 1.2rem; min-width: 180px; display: flex; flex-direction: column; align-items: flex-start; background: #fafbfc;">
            <div style="display: flex; align-items: center; gap: 0.5rem;">
              <i class="bi-file-earmark-pdf fs-2"></i>
              <span style="font-weight: 600;">Document Title</span>
            </div>
            <div style="font-size: 0.95rem; color: #666; margin: 0.3rem 0 0.2rem 0;">Description</div>
            <div style="font-size: 0.9rem; color: #888;">@user | 2024-06-17 12:00</div>
            <button class="btn p-0 ms-auto download-btn" style="border:none; background:none; margin-top: 0.5rem;" title="Download">
              <i class="bi-download fs-3"></i>
            </button>
          </div>
        </div>
        <!-- Comments Section -->
        <div style="background-color: #f5f5f5; padding: 1rem; border-radius: 8px; margin-bottom: 1.5rem;">
          <div id="microtaskComments" style="margin-bottom: 1.5rem; overflow-y: auto; max-height: 300px; flex-grow: 1; padding-right: 0.5rem;">
            <!-- Comments will be dynamically loaded here -->
          </div>
          <!-- Comment Input -->
          <form id="microtaskCommentForm" style="display: flex; align-items: center; gap: 1rem; border: 1px solid #ddd; border-radius: 8px; padding: 0.5rem 1rem; background: white;">
              <input type="hidden" name="csrf_token" value="{{ csrf_token }}">
              <div style="width: 36px; height: 36px; border-radius: 50%; background: #eee; display: flex; align-items: center; justify-content: center; flex-shrink: 0;">
                  {% if user.pfp %}
                      <img src="{{ user.pfp }}" 
                      style="width: 24px; height: 24px; border-radius: 50%; object-fit: cover; display: inline-block;">
                  {% else %}
                      <img src="{{ request.static_url('plantask:static/default_pfp.svg') }}" 
                      style="width: 24px; height: 24px; border-radius: 50%; object-fit: cover; display: inline-block;">
                  {% endif %}
              </div>
              <input type="text" id="microtaskCommentInput" class="form-control" name="content" placeholder="Write a comment" style="border: none; box-shadow: none; font-size: 1.1rem;">
              <button type="button" id="submitCommentButton" class="send-button"><i class="bi-send"></i></button>
          </form>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Attach File Modal -->
<div class="modal fade" id="attachFileModal" tabindex="-1" aria-labelledby="attachFileModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <form method="POST" action="{{ request.route_url('file_upload_page') }}" enctype="multipart/form-data">
        <input type="hidden" name="csrf_token" value="{{ csrf_token }}">
        <input type="hidden" name="entity_type" value="task">
        <input type="hidden" name="entity_id" value="{{ task.id }}">
        <div class="modal-header">
          <h5 class="modal-title" id="attachFileModalLabel">Attach File to Task</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <input type="file" name="file" class="form-control" required>
          <input type="hidden" name="task_id" value="{{ task.id }}">
        </div>
        <div class="modal-footer">
          <button type="button" class="btn mybtn-gray" data-bs-dismiss="modal">Cancel</button>
          <button type="submit" class="btn mybtn-green">Upload</button>
        </div>
      </form>
    </div>
  </div>
</div>

<!-- Custom Download Reason Modal -->
<div id="downloadReasonModal" class="custom-modal">
  <div class="custom-modal-dialog">
    <div class="custom-modal-content">
      <div class="custom-modal-header">
        <h5 class="custom-modal-title">Generate Download Ticket</h5>
        <button type="button" class="custom-modal-close"><i class="bi-x-lg"></i></button>
      </div>
      <form id="downloadReasonForm" class="custom-modal-body">
        <dl class="file-details">
          <dt>File</dt>
          <dd id="downloadFileName"></dd>
          <dt>User</dt>
          <dd id="downloadUserName">{{ user.username if user else 'Unknown' }}</dd>
        </dl>
        <div class="mb-3">
          <label for="downloadReason" class="form-label">Why would you like to download this file?</label>
          <textarea class="form-control" id="downloadReason" name="reason" required></textarea>
        </div>
        <div class="d-flex gap-2">
          <button type="button" class="btn btn-secondary" id="cancelDownloadReason">Cancel</button>
          <button type="submit" class="btn btn-primary">Download File</button>
        </div>
        <div id="downloadReasonSuccess" style="display:none; color:green; margin-top:1rem; text-align:center;">
          Your reason was submitted!<br>Download will start...
        </div>
      </form>
    </div>
  </div>
</div>

{% endblock %}

{% block scripts %}
<script>
const userRole = "{{ role }}"

document.addEventListener('DOMContentLoaded', function() {
    var fileInput = document.getElementById('fileInput');
    var filenameInput = document.getElementById('filename');
    if (fileInput && filenameInput) {
        fileInput.addEventListener('change', function() {
            if (fileInput.files.length > 0) {
                    filenameInput.value = fileInput.files[0].name;
            }
        });
    }


    // Download functionality
    const downloadButtons = document.querySelectorAll('.download-btn');
    const downloadReasonModal = document.getElementById('downloadReasonModal');
    const downloadFileName = document.getElementById('downloadFileName');
    const downloadReasonForm = document.getElementById('downloadReasonForm');
    const downloadReasonSuccess = document.getElementById('downloadReasonSuccess');
    const cancelDownloadButton = document.getElementById('cancelDownloadReason');
    const modalClose = downloadReasonModal.querySelector('.custom-modal-close');
    let currentFileId = null;

    function openDownloadReasonModal(filename, fileId) {
        downloadFileName.textContent = filename;
        currentFileId = fileId;
        downloadReasonModal.classList.add('show');
        downloadReasonSuccess.style.display = 'none';
        downloadReasonForm.reset();
        document.body.style.overflow = 'hidden';
    }
    function closeDownloadReasonModal() {
        downloadReasonModal.classList.remove('show');
        downloadReasonForm.reset();
        document.body.style.overflow = '';
    }

    // Add click handlers for download buttons
    downloadButtons.forEach(button => {
        button.addEventListener('click', (e) => {
            e.preventDefault();
            const filename = button.dataset.filename;
            const fileId = button.dataset.fileId;
            if (userRole === 'admin') {
                // Direct download for admin
                window.location.href = `{{ request.route_url('file_crud') }}?action=download&file_id=${fileId}&entity_type=task&entity_id=${taskId}`;
            } else {
                // Show modal for non-admins
                openDownloadReasonModal(filename, fileId);
            }
        });
    });

    // Close modal handlers
    modalClose.addEventListener('click', closeDownloadReasonModal);
    cancelDownloadButton.addEventListener('click', closeDownloadReasonModal);

    // Handle form submission
    downloadReasonForm.addEventListener('submit', function(e) {
        e.preventDefault();
        
        // Show success message
        downloadReasonSuccess.style.display = 'flex';
        
        // Start download after a brief delay
        setTimeout(() => {
            window.location.href = `{{ request.route_url('file_crud') }}?action=download&file_id=${currentFileId}&entity_type=task&entity_id=${taskId}`;
            closeDownloadReasonModal();
        }, 1500);
    });

    // Task status update functionality
    function updateStatus(newStatus) {
        fetch("{{ request.route_url('update_task_status') }}", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "X-CSRF-Token": "{{ request.session.get_csrf_token() }}"
            },
            body: JSON.stringify({
                task_id: {{ task.id }},
                new_status: newStatus
            })
        })
        .then(response => {
            if (!response.ok) {
                throw new Error(`HTTP error! Status: ${response.status}`);
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                window.location.reload();
            } else {
                alert(data.error || "Failed to update status.");
            }
        })
        .catch(error => {
            console.error("Error updating status:", error);
            alert("Failed to update status. Please try again.");
        });
    }

    {% if task.status == 'assigned' %}
    document.getElementById('movestatusbutton').onclick = function() {
        updateStatus('in_progress');
    };
    {% elif task.status == 'in_progress' %}
    document.getElementById('backtoassigned').onclick = function() {
        updateStatus('assigned');
    };
    document.getElementById('sendforreview').onclick = function() {
        updateStatus('under_review');
    };
    {% elif task.status == 'under_review' %}
    document.getElementById('backtoinprogress').onclick = function() {
        updateStatus('in_progress');
    };
    document.getElementById('completetask').onclick = function() {
        updateStatus('completed');
    };
    {% elif task.status == 'completed' %}
    document.getElementById('backtoreview').onclick = function() {
        updateStatus('under_review');
    };
    {% endif %}

    const modal = document.getElementById('microtaskDetailsModal');
    const closeBtn = modal.querySelector('.custom-modal-close');
    const microtaskItems = document.querySelectorAll('.microtask-list-item');
    const markReviewButton = document.getElementById('markReviewButton');

    const submitCommentButton = document.getElementById('submitCommentButton');
    const commentInput = document.getElementById('microtaskCommentInput');
    const commentsContainer = document.getElementById('microtaskComments');

    const taskCommentsContainer = document.getElementById('taskComments');
    const taskCommentForm = document.getElementById('taskCommentForm');
    const taskCommentInput = document.getElementById('taskCommentInput');
    const taskId = '{{ task_id }}';

    function fetchTaskComments() {
        fetch(`{{ request.route_url('get_task_comments') }}?task_id=${taskId}`)
        .then(response => response.json())
        .then(data => {
            taskCommentsContainer.innerHTML = '';
            if (data.comments) {
                data.comments.forEach(comment => {
                    const el = document.createElement('div');
                    el.style.display = 'flex';
                    el.style.alignItems = 'flex-start';
                    el.style.gap = '1rem';
                    el.style.marginBottom = '1rem';
                    el.innerHTML = `
                        <div style="width: 48px; height: 48px; border-radius: 50%; background: #eee; display: flex; align-items: center; justify-content: center; overflow: hidden;">
                            ${
                                comment.profile_picture_url
                                ? `<img src="${comment.profile_picture_url}" alt="${comment.username}" style="width: 100%; height: 100%; object-fit: cover;">`
                                : `<i class="bi-person-circle fs-2"></i>`
                            }
                        </div>
                        <div>
                            <div style="font-weight: 600;">${comment.username}</div>
                            <div style="font-size: 1.05rem; color: #222;">${comment.content}</div>
                            <div style="font-size: 0.85rem; color: #888;">${comment.time_posted}</div>
                        </div>
                    `;
                    taskCommentsContainer.appendChild(el);
                });
                taskCommentsContainer.scrollTop = taskCommentsContainer.scrollHeight;
            }
        })
        .catch(error => console.log('Error:', error));
    }

    taskCommentForm.addEventListener('submit', function(e) {
        e.preventDefault();
        const content = taskCommentInput.value.trim();
        if (!content) return;
        
        fetch("{{ request.route_url('add_task_comment', task_id=task.id) }}", {
            method: "POST",
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
            },
            body: new URLSearchParams({
                content: content,
                csrf_token: "{{ csrf_token }}"
            })
        })
        .then(response => {
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            return response.json();
        })
        .then(data => {
            if (data.error) {
                console.log('Server error:', data.error);
                return;
            }
            taskCommentInput.value = '';
            fetchTaskComments();
        })
        .catch(error => {
            console.log('Error:', error);
        });
    });

    fetchTaskComments();

    function openModal() {
        modal.style.display = 'flex';
        setTimeout(() => {
            modal.classList.remove('animating-out');
            modal.classList.add('show');
            modal.setAttribute('aria-hidden', 'false');
            document.body.style.overflow = 'hidden'; 
        }, 10);
    }

    function fetchComments(microtaskId) {
        fetch(`{{ request.route_url('get_microtask_comments') }}?microtask_id=${microtaskId}`, {
            method: "GET",
            headers: {
                "Content-Type": "application/json",
                "X-CSRF-Token": "{{ request.session.get_csrf_token() }}"
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.error) {
                console.error('Error:', data.error);
                return;
            }

            // Clear existing comments
            commentsContainer.innerHTML = '';

            // Populate comments
            data.comments.forEach(comment => {
                const commentElement = document.createElement('div');
                commentElement.style.display = 'flex';
                commentElement.style.alignItems = 'flex-start';
                commentElement.style.gap = '1rem';
                commentElement.style.marginBottom = '1rem';

                commentElement.innerHTML = `
                    <div style="width: 48px; height: 48px; border-radius: 50%; background: #eee; display: flex; align-items: center; justify-content: center; overflow: hidden;">
                        ${
                            comment.profile_picture_url
                            ? `<img src="${comment.profile_picture_url}" alt="${comment.username}" style="width: 100%; height: 100%; object-fit: cover;">`
                            : `<i class="bi-person-circle fs-2"></i>`
                        }
                    </div>
                    <div>
                        <div style="font-weight: 600;">${comment.username}</div>
                        <div style="font-size: 1.05rem; color: #222;">${comment.content}</div>
                        <div style="font-size: 0.85rem; color: #888;">${comment.time_posted}</div>
                    </div>
                `;

                commentsContainer.appendChild(commentElement);
            });
            commentsContainer.scrollTop = commentsContainer.scrollHeight;
        })
        .catch(error => console.error('Error:', error));
    }

    function updateMarkReviewButton(status) {
        const userRole = '{{ role }}';

        if (userRole !== 'admin' && userRole !== 'project_manager') {
        // Regular users can only mark for review from undone state
            if (status === 'undone') {
                markReviewButton.style.display = 'block';
                markReviewButton.innerHTML = 'Mark for Review <i class="bi-eye-fill"></i>';
                markReviewButton.style.background = '#a6a6be';
            } else {
                markReviewButton.style.display = 'none';
            }
        } else {
            // Admin and PM can use all states
            markReviewButton.style.display = 'block';
            if (status === 'undone') {
                markReviewButton.innerHTML = 'Mark for Review <i class="bi-eye-fill"></i>';
                markReviewButton.style.background = 'rgb(118, 112, 151)';
            } else if (status === 'under_review') {
                markReviewButton.innerHTML = 'Mark as Approved <i class="bi-check-lg"></i>';
                markReviewButton.style.background = '#28a745';
            } else if (status === 'approved') {
                markReviewButton.innerHTML = 'Mark as Undone <i class="bi-arrow-counterclockwise"></i>';
                markReviewButton.style.background = '#6c757d';
            }
        }
    }

    function updateMicrotaskStatus(microtaskId, currentStatus) {
        let newStatus;
        if (currentStatus === 'undone') {
            newStatus = 'under_review';
        } else if (currentStatus === 'under_review') {
            newStatus = 'approved';
        } else if (currentStatus === 'approved') {
            newStatus = 'undone';
        }

        fetch("{{ request.route_url('update_microtask_status') }}", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "X-CSRF-Token": "{{ request.session.get_csrf_token() }}"
            },
            body: JSON.stringify({
                microtask_id: microtaskId,
                new_status: newStatus
            })
        })
        .then(response => response.json())
        .then(data => {
            if (data.error) {
                console.error('Error:', data.error);
                return;
            }
            // Update the list item
            const microtaskItem = document.querySelector(`[data-mtid="${microtaskId}"]`);
            if (microtaskItem) {
                microtaskItem.dataset.status = newStatus;
                const icon = microtaskItem.querySelector('i');
                if (icon) {
                    if (newStatus === 'undone') {
                        icon.className = 'bi-square';
                    } else if (newStatus === 'under_review') {
                        icon.className = 'bi-eye-fill';
                    } else if (newStatus === 'approved') {
                        icon.className = 'bi-check-square-fill';
                    }
                }
                
                // Update modal immediately
                document.getElementById('microtaskStatusIcon').innerHTML = `<i class="${icon.className}"></i>`;
                let statusText = newStatus.charAt(0).toUpperCase() + newStatus.slice(1).replace(/_/g, ' ');
                document.getElementById('microtaskStatus').textContent = statusText;
                
                // Update button and its click handler
                updateMarkReviewButton(newStatus);
                markReviewButton.onclick = () => updateMicrotaskStatus(microtaskId, newStatus);
            }
        })
        .catch(error => console.error('Error:', error));
    }

    submitCommentButton.addEventListener('click', submitComment);

    commentInput.addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            e.preventDefault(); // Prevent default form submission
            submitComment();
        }
    });

    function submitComment() {
        const content = commentInput.value.trim();
        if (!content) {
            alert('Comment cannot be empty');
            return;
        }

        // Get the microtask ID from the currently displayed microtask
        const microtaskId = document.querySelector('.microtask-list-item.active')?.dataset.mtid;
        if (!microtaskId) {
            alert('No microtask selected');
            return;
        }

         const url = "{{ request.route_url('add_microtask_comment', microtask_id='__id__') }}".replace('__id__', microtaskId);

        fetch(url, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "X-CSRF-Token": "{{ request.session.get_csrf_token() }}"
            },
            body: JSON.stringify({
                content: content
            })
        })
        .then(response => response.json())
        .then(data => {
            if (data.error) {
                console.error('Error:', data.error);
                return;
            }
            // Clear input and refresh comments
            commentInput.value = '';
            fetchComments(microtaskId);
        })
        .catch(error => console.error('Error:', error));
    }

      
    function closeModal() {
        modal.classList.add('animating-out');
        modal.classList.remove('show');
        modal.setAttribute('aria-hidden', 'true');
        document.body.style.overflow = '';
        
        // Remove active class from all microtask items
        microtaskItems.forEach(i => i.classList.remove('active'));
        
        setTimeout(() => {
            modal.style.display = 'none';
            modal.classList.remove('animating-out');
        }, 350);
    }

    // Event Listeners
    closeBtn.addEventListener('click', closeModal);

    microtaskItems.forEach(item => {
        item.addEventListener('click', () => {
            // Remove active class from all items
            microtaskItems.forEach(i => i.classList.remove('active'));
            // Add active class to clicked item
            item.classList.add('active');

            const status = item.dataset.status || 'undone';
            const microtaskId = item.dataset.mtid;
            const statusIcon = item.querySelector('i').outerHTML;
            
            // Update modal content
            document.getElementById('microtaskStatusIcon').innerHTML = statusIcon;
            document.getElementById('microtaskName').textContent = item.dataset.name;
            document.getElementById('microtaskDescription').textContent = item.dataset.description;
            document.getElementById('microtaskDueDate').textContent = `Due Date: ${item.dataset.due}`;
            
            let statusText = status.charAt(0).toUpperCase() + status.slice(1).replace(/_/g, ' ');
            document.getElementById('microtaskStatus').textContent = statusText;
            
            // Update review button
            updateMarkReviewButton(status);
            markReviewButton.onclick = () => updateMicrotaskStatus(microtaskId, status);
            
            // Fetch comments
            fetchComments(microtaskId);
            
            // Open modal
            openModal();
        });
    });

    // ESC key to close modal
    document.addEventListener('keydown', (e) => {
        if (e.key === "Escape" && modal.classList.contains('show')) {
            closeModal();
        }
    });
});
</script>
{% endblock %}