{% extends "layout.jinja2" %}

{% block title %}{{task.task_title}}{% endblock %}

{% block styles %}
<link href="{{ request.static_url('plantask:static/styles/microtask.css') }}" rel="stylesheet">
<link href="{{ request.static_url('plantask:static/styles/tasks.css') }}" rel="stylesheet">
<link href="{{ request.static_url('plantask:static/styles/filetask.css') }}" rel="stylesheet">
{% endblock %}

{% block content %}
<div class="main-layout">
    <main class="mycontainer"> 
        <div style="display: flex; align-items: center; justify-content: space-between;">
            <h1 style="margin: 0;">{{ task.task_title }}</h1>
            <div class="label-list">
                {% for label_id, label_name, label_hex_color in labels %}
                    <div class="label" style="background-color: {{ label_hex_color }};">
                        {{ label_name }}
                    </div>
                {% endfor %}
            </div>
            {% if role == 'admin' %}
                <button class="addlbbtn btn" type="button" data-bs-toggle="modal" data-bs-target="#addLabelModal" aria-label="Add Label" title="Add Label">Labels <i class="bi-plus-lg"></i></button>
            {% endif %}
        </div>
        <h3>
            <a class="project-name" href="{{ request.route_url('project_by_id', id=project.id) }}">{{ project.name }}</a>
        </h3>
        <div class="info-row">
            <div class="info">Creation Date: {{ task.date_created.strftime('%Y-%m-%d') }}</div>
            <div class="info due-date">Due Date: {{ task.due_date.strftime('%Y-%m-%d') }}</div>
            {% if role == 'admin' %}
            <div class="admin-actions">
                <button type="button" class="btn btn-info btn-lg" data-bs-toggle="modal" data-bs-target="#editTaskModal">
                    Edit Task <i class="bi-pencil-square"></i>
                </button>
                <button type="button" class="btn btn-danger btn-lg" data-bs-toggle="modal" data-bs-target="#deleteTaskModal">
                    Delete Task <i class="bi-trash3"></i>
                </button>
            </div>
            <button class="filebtn mybtn btn" type="button" data-bs-toggle="modal" data-bs-target="#attachFileModal">
                Attach File
                <i class="bi-paperclip"></i>
            </button>
            {% endif %}
            <div class="status-actions">
                {% if task.status == 'assigned' %}
                    <button class="mybtn btn" type="button" id="movestatusbutton">
                        Move to In Progress
                        <i class="bi-box-arrow-right"></i>
                        <i class="bi-pen-fill"></i>
                    </button>
                {% elif task.status == 'in_progress' %}
                    <button class="mybtn btn" type="button" id="backtoassigned">
                        Back to Assigned
                        <i class="bi-pin-angle-fill"></i>
                        <i class="bi-box-arrow-left"></i>
                    </button>
                    <button class="mybtn btn" type="button" id="sendforreview">
                        Send for Review
                        <i class="bi-box-arrow-right"></i>
                        <i class="bi-eye-fill"></i>
                    </button>
                {% elif task.status == 'under_review' %}
                    <button class="mybtn btn" type="button" id="backtoinprogress">
                        Back to In Progress
                        <i class="bi-pen-fill"></i>
                        <i class="bi-box-arrow-left"></i>
                    </button>
                    <button class="mybtn btn" type="button" id="completetask">
                        Complete Task
                        <i class="bi-box-arrow-right"></i>
                        <i class="bi-check-circle-fill"></i>
                    </button>
                {% elif task.status == 'completed' %}
                    <button class="mybtn btn" type="button" id="backtoreview">
                        Back to In Review
                        <i class="bi-eye-fill"></i>
                        <i class="bi-box-arrow-left"></i>
                    </button>
                {% endif %}
            </div>
        </div>
        <p class="info">{{ task.task_description }}</p>

        <!-- Microtasks List -->
        {% if microtasks %}
            <ul class="list-group mb-4">
                {% for mt in microtasks %}
                    <li class="list-group-item justify-content-between align-items-center microtask-list-item"
                        data-mtid="{{ mt.id }}"
                        data-name="{{ mt.name|e }}"
                        data-description="{{ mt.description|e }}"
                        data-status="{{ mt.status }}"
                        data-due="{{ mt.due_date.strftime('%Y-%m-%d') if mt.due_date else '' }}">
                        <div class="microtask-item" style="cursor:pointer;">
                            {% if mt.status == 'undone' %}
                                <i class="bi-square"></i>
                            {% elif mt.status == 'under_review' %}
                                <i class="bi-square-fill"></i>
                            {% elif mt.status == 'approved' %}
                                <i class="bi-check-square-fill"></i>
                            {% endif %}
                            <strong>{{ mt.name }}</strong>
                        </div>
                    </li>
                {% endfor %}
            </ul>
        {% else %}
            <div class="alert alert-info">No microtasks assigned to this task.</div>
        {% endif %}

        {% if role == 'admin' %}
            <a href="{{ request.route_url('create_microtask', task_id=task.id) }}" class="create-microtask-button">
                Create New MicroTask <i class="bi-plus-lg"></i>
            </a>
        {% endif %}
    </main>
    <aside class="right-sidebar">
        <h3>Files</h3>
        <div class="files-scroll-area">
            {% if files %}
            <ul class="list-group mb-4">
                {% for f in files %}
                <li class="list-group-item justify-content-between align-items-center">
                    <div class="file-item" style="cursor:pointer;">
                        <i class="bi-filetype-{{f.extension}} fs-1"></i>
                        <div style="display:flex; flex-direction:column; flex:2; min-width:0;">
                            <strong style="word-break: break-all; white-space: normal;">{{ f.filename }}</strong>
                            <span style="font-size:0.95em; color:#666;">
                            {{ f.creation_date.strftime('%Y-%m-%d %H:%M') }}
                            </span>
                        </div>
                        <a href="" class="btn p-0 ms-auto download-btn" style="border:none; background:none;" title="Download">
                            <i class="bi-download fs-1"></i>
                        </a>
                    </div>
                </li>
                {% endfor %}
            </ul>
            {% else %}
                <div class="alert alert-info">No files attached to this task.</div>
            {% endif %}
        </div>
    </aside>
</div>

{% set relation_value = True %}
{% set task_id =  task.id %}
{% include "labels_modal.jinja2" %}

<!-- Edit Task Modal -->
<div class="modal fade" id="editTaskModal" tabindex="-1" aria-labelledby="editTaskModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <form method="POST" action="{{ request.route_url('edit_task', id=task.id) }}">
                <input type="hidden" name="csrf_token" value="{{ csrf_token }}">
                <div class="modal-header">
                    <h5 class="modal-title" id="editTaskModalLabel">Edit Task</h5>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="taskTitle" class="form-label">Task Title</label>
                        <input type="text" class="form-control" id="taskTitle" name="name" value="{{ task.task_title }}" maxlength="55">
                    </div>
                    <div class="mb-3">
                        <label for="taskDescription" class="form-label">Task Description</label>
                        <textarea class="form-control" id="taskDescription" name="description" maxlength="150">{{ task.task_description }}</textarea>
                    </div>
                    <div class="mb-3">
                        <label for="taskDueDate" class="form-label">Due Date</label>
                        <input type="date" class="form-control" id="taskDueDate" name="due_date" value="{{ task.due_date.strftime('%Y-%m-%d') }}" required min="{{ current_date }}">
                    </div>
                </div>
                <div class="modal-footer border-0">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-info">Save Changes</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Delete Task Modal -->
<div class="modal fade" id="deleteTaskModal" tabindex="-1" aria-labelledby="deleteTaskModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <form method="POST" action="{{ request.route_url('delete_task', id=task.id) }}">
                <input type="hidden" name="csrf_token" value="{{ csrf_token }}">
                <div class="modal-header">
                    <h5 class="modal-title" id="deleteTaskModalLabel">Delete Task</h5>
                </div>
                <div class="modal-body">
                    Are you sure you want to delete the task "{{ task.task_title }}"?
                </div>
                <div class="modal-footer border-0">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-danger">Delete</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Modal microtask -->
<div id="microtaskDetailsModal" class="custom-modal" aria-hidden="true" role="dialog" aria-labelledby="microtaskDetailsModalLabel" aria-modal="true" tabindex="-1">
  <div class="custom-modal-dialog" role="document" style="max-width: 1100px; min-width: 900px;">
    <div class="custom-modal-content" style="padding: 2.5rem 2.5rem 2rem 2.5rem; border-radius: 12px;">
      <div class="custom-modal-header" style="border-bottom: none; padding: 0; margin-bottom: 1.5rem;">
        <button type="button" class="custom-modal-close" aria-label="Close" style="position: absolute; right: 0.5rem; top: 0.5rem; background: none; border: none; font-size: 2rem; color: #888; z-index: 10;">
          <i class="bi-x-lg"></i>
        </button>
        <div style="display: flex; align-items: flex-start; justify-content: space-between; width: 100%;">
          <div>
            <div style="display: flex; align-items: center; gap: 1.5rem;">
                <span id="microtaskStatusIcon" class="fs-1"></span>
                <span id="microtaskName" style="font-size: 2rem; font-weight: 600;"></span>
                <span id="microtaskStatus" style="font-size: 1.1rem; color: #888; margin-left: 1rem;"></span>
            </div>
            <div style="display: flex; gap: 1.5rem; margin-top: 0.5rem; font-size: 1.1rem;">
              <a href="{{ request.route_url('task_by_id', id=task.id) }}" style="text-decoration: none; color: inherit; font-weight: 500;">Task: {{ task.task_title }}</a>
              <span style="color: #999;">|</span>
              <a href="{{ request.route_url('project_by_id', id=project.id) }}" style="text-decoration: none; color: inherit; font-weight: 500;">Project: {{ project.name }}</a>
            </div>
          </div>
          <div style="display: flex; flex-direction: column; align-items: flex-end; gap: 0.5rem; padding-right: 2rem !important;">
            <span id="microtaskDueDate" style="font-size: 1.1rem; color: #666;" >Due Date</span>
            <button class="btn btn-secondary" id="markReviewButton" style="background: #a6a6be; color: #fff; border: none; border-radius: 6px; padding: 0.4rem 1.2rem; font-size: 1.1rem; font-weight: 500;">
              Mark for Review <i class="bi-eye"></i>
            </button>
          </div>
        </div>
      </div>
      <div class="custom-modal-body" style="padding: 0;">
        <div id="microtaskDescription" class="info" style="font-size: 1.2rem; margin-bottom: 2rem; margin-top: 1rem; color: #222;"></div>
        <!-- Attached Files Section -->
        <div id="microtaskFiles" style="display: flex; gap: 1.5rem; margin-bottom: 2rem;">
          <!-- Example file card, repeat for each file -->
          <!--
          <div class="file-card" style="border: 1px solid #ccc; border-radius: 8px; padding: 1rem 1.2rem; min-width: 180px; display: flex; flex-direction: column; align-items: flex-start; background: #fafbfc;">
            <div style="display: flex; align-items: center; gap: 0.5rem;">
              <i class="bi-file-earmark-pdf fs-2"></i>
              <span style="font-weight: 600;">Document Title</span>
            </div>
            <div style="font-size: 0.95rem; color: #666; margin: 0.3rem 0 0.2rem 0;">Description</div>
            <div style="font-size: 0.9rem; color: #888;">@user | 2024-06-17 12:00</div>
            <button class="btn p-0 ms-auto download-btn" style="border:none; background:none; margin-top: 0.5rem;" title="Download">
              <i class="bi-download fs-3"></i>
            </button>
          </div>
          -->
        </div>
        <!-- Comments Section -->
        <div id="microtaskComments" style="margin-bottom: 1.5rem;">
          <!-- Example comment, repeat for each comment -->
          <!--
          <div style="display: flex; align-items: flex-start; gap: 1rem; margin-bottom: 1rem;">
            <div style="width: 48px; height: 48px; border-radius: 50%; background: #eee; display: flex; align-items: center; justify-content: center;">
              <i class="bi-person-circle fs-2"></i>
            </div>
            <div>
              <div style="font-weight: 600;">@username</div>
              <div style="font-size: 1.05rem; color: #222;">Comment text goes here.</div>
            </div>
          </div>
          -->
        </div>
        <!-- Comment Input -->
        <form id="microtaskCommentForm" style="display: flex; align-items: center; gap: 1rem; border: 1px solid #ddd; border-radius: 8px; padding: 0.5rem 1rem;">
          <div style="width: 36px; height: 36px; border-radius: 50%; background: #eee; display: flex; align-items: center; justify-content: center;">
            <i class="bi-person-circle fs-4"></i>
          </div>
          <input type="text" id="microtaskCommentInput" class="form-control" placeholder="Write a comment" style="border: none; box-shadow: none; font-size: 1.1rem;">
          <button type="submit" class="btn btn-info" style="border-radius: 50%; width: 38px; height: 38px; display: flex; align-items: center; justify-content: center;">
            <i class="bi-send fs-5"></i>
          </button>
        </form>
      </div>
    </div>
  </div>
</div>

<!-- Attach File Modal -->
<div class="modal fade" id="attachFileModal" tabindex="-1" aria-labelledby="attachFileModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <form method="POST" action="{{ request.route_url('file_upload_page') }}" enctype="multipart/form-data">
        <input type="hidden" name="csrf_token" value="{{ csrf_token }}">
        <input type="hidden" name="entity_type" value="task">
        <input type="hidden" name="entity_id" value="{{ task.id }}">
        <div class="modal-header">
          <h5 class="modal-title" id="attachFileModalLabel">Attach File to Task</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <input type="file" name="file" class="form-control" required>
          <input type="hidden" name="task_id" value="{{ task.id }}">
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
          <button type="submit" class="btn btn-info">Upload</button>
        </div>
      </form>
    </div>
  </div>
</div>

<!-- Custom Download Reason Modal -->
<div id="downloadReasonModal" class="custom-modal" aria-hidden="true" role="dialog" aria-labelledby="downloadReasonModalLabel" aria-modal="true" tabindex="-1" style="display:none;">
  <div class="custom-modal-dialog" role="document">
    <div class="custom-modal-content">
      <div class="custom-modal-header">
        <h5 id="downloadReasonModalLabel" class="custom-modal-title">Generate Download Ticket</h5>
        <button type="button" class="custom-modal-close" aria-label="Close"><i class="bi-x-lg"></i></button>
      </div>
      <form id="downloadReasonForm" class="custom-modal-body" autocomplete="off">
        <dl class="file-details">
          <dt>File</dt>
          <dd id="downloadFileName"></dd>
          <dt>User</dt>
          <dd id="downloadUserName">{{ user.username if user else 'Unknown' }}</dd>
        </dl>
        <div class="mb-3">
          <label for="downloadReason" class="form-label">Why would you like to download this file?</label>
          <textarea class="form-control" id="downloadReason" name="reason" required rows="3" style="resize:vertical; max-height:7rem; min-height:3rem; width:100%;"></textarea>
        </div>
        <div style="gap:0.5rem;">
          <button type="button" class="btn btn-secondary" id="cancelDownloadReason">Cancel</button>
          <button type="submit" class="btn btn-info">Send & Request Download</button>
        </div>
        <div id="downloadReasonSuccess" style="display:none; color:green; margin-top:1rem; justify-content:center; text-align: center;">
          Your reason was submitted! (Simulated)<br>Download will start...
        </div>
      </form>
    </div>
  </div>
</div>

{% endblock %}

{% block scripts %}
<script>
document.addEventListener('DOMContentLoaded', function() {
        var fileInput = document.getElementById('fileInput');
        var filenameInput = document.getElementById('filename');
        if (fileInput && filenameInput) {
                fileInput.addEventListener('change', function() {
                        if (fileInput.files.length > 0) {
                                filenameInput.value = fileInput.files[0].name;
                        }
                });
        }
});

document.addEventListener('DOMContentLoaded', function() {
    // Task status update functionality
    function updateStatus(newStatus) {
        fetch("{{ request.route_url('update_task_status') }}", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "X-CSRF-Token": "{{ request.session.get_csrf_token() }}"
            },
            body: JSON.stringify({
                task_id: {{ task.id }},
                new_status: newStatus
            })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                window.location.reload();
            } else {
                alert(data.error || "Failed to update status.");
            }
        })
        .catch(() => alert("Failed to update status."));
    }

    {% if task.status == 'assigned' %}
    document.getElementById('movestatusbutton').onclick = function() {
        updateStatus('in_progress');
    };
    {% elif task.status == 'in_progress' %}
    document.getElementById('backtoassigned').onclick = function() {
        updateStatus('assigned');
    };
    document.getElementById('sendforreview').onclick = function() {
        updateStatus('under_review');
    };
    {% elif task.status == 'under_review' %}
    document.getElementById('backtoinprogress').onclick = function() {
        updateStatus('in_progress');
    };
    document.getElementById('completetask').onclick = function() {
        updateStatus('completed');
    };
    {% elif task.status == 'completed' %}
    document.getElementById('backtoreview').onclick = function() {
        updateStatus('under_review');
    };
    {% endif %}

    // Microtask modal functionality
    const modal = document.getElementById('microtaskDetailsModal');
    const closeBtn = modal.querySelector('.custom-modal-close');
    const microtaskItems = document.querySelectorAll('.microtask-list-item');

    function openModal() {
        modal.style.display = 'flex';
        setTimeout(() => {
            modal.classList.remove('animating-out');
            modal.classList.add('show');
            modal.setAttribute('aria-hidden', 'false');
            document.body.style.overflow = 'hidden'; 
        }, 10);
    }


    function closeModal() {
        modal.classList.add('animating-out');
        modal.classList.remove('show');
        modal.setAttribute('aria-hidden', 'true');
        document.body.style.overflow = '';  // Re-enable background scrolling

        // Ocultar visualmente después de que termine la animación
        setTimeout(() => {
            modal.classList.remove('animating-out');
            modal.style.display = 'none';
        }, 350);
    }

    // Close modal when close button is clicked
    closeBtn.addEventListener('click', closeModal);

    // Fill and open modal when clicking on a microtask
    microtaskItems.forEach(item => {
        item.addEventListener('click', () => {
            // Get the status from the data attribute
            const status = item.dataset.status || 'undone';
            
            // Set the status icon based on status
            let statusIcon = '';
            if (status === 'undone') {
                statusIcon = '<i class="bi-square"></i>';
            } else if (status === 'under_review') {
                statusIcon = '<i class="bi-square-fill"></i>';
            } else if (status === 'approved') {
                statusIcon = '<i class="bi-check-square-fill"></i>';
            }
            
            document.getElementById('microtaskStatusIcon').innerHTML = statusIcon;
            document.getElementById('microtaskName').textContent = item.dataset.name || 'N/A';
            document.getElementById('microtaskDescription').textContent = item.dataset.description || 'N/A';
            
            let statusText = status.charAt(0).toUpperCase() + status.slice(1).replace(/_/g, ' ');
            document.getElementById('microtaskStatus').textContent = statusText;
            
            document.getElementById('microtaskDueDate').textContent = item.dataset.due || 'No due date';

            openModal();
        });
    });

    // Optional: close modal with ESC key
    document.addEventListener('keydown', (e) => {
        if (e.key === "Escape" && modal.classList.contains('show')) {
            closeModal();
        }
    });

    // Modal for download reason
    const downloadModal = document.getElementById('downloadReasonModal');
    const downloadForm = document.getElementById('downloadReasonForm');
    const downloadCloseBtn = downloadModal.querySelector('.custom-modal-close');
    const cancelDownloadBtn = document.getElementById('cancelDownloadReason');
    const downloadFileName = document.getElementById('downloadFileName');
    const downloadReasonSuccess = document.getElementById('downloadReasonSuccess');

    // Attach click event to all download buttons
    document.querySelectorAll('.file-item .download-btn').forEach(btn => {
        btn.addEventListener('click', function(e) {
            e.preventDefault();
            // Get file info from DOM
            const fileItem = btn.closest('.file-item');
            const fileName = fileItem.querySelector('strong')?.textContent || 'Unknown';
            downloadFileName.textContent = fileName;
            downloadReasonSuccess.style.display = 'none';
            downloadForm.style.pointerEvents = '';
            downloadForm.reset();
            // Show modal
            downloadModal.style.display = 'flex';
            setTimeout(() => {
                downloadModal.classList.add('show');
                downloadModal.setAttribute('aria-hidden', 'false');
                document.body.style.overflow = 'hidden';
            }, 10);
        });
    });

    // Close modal logic
    function closeDownloadModal() {
        downloadModal.classList.remove('show');
        downloadModal.setAttribute('aria-hidden', 'true');
        document.body.style.overflow = '';
        setTimeout(() => {
            downloadModal.style.display = 'none';
        }, 350);
    }
    downloadCloseBtn.addEventListener('click', closeDownloadModal);
    cancelDownloadBtn.addEventListener('click', closeDownloadModal);

    // Simulate backend on submit
    downloadForm.addEventListener('submit', function(e) {
        e.preventDefault();
        downloadForm.style.pointerEvents = 'none';
        downloadReasonSuccess.style.display = 'block';
        setTimeout(() => {
            closeDownloadModal();
            // Simulate download (replace with real download if needed)
            // window.location.href = btn.href;
        }, 1500);
    });

    // Optional: close modal with ESC key
    document.addEventListener('keydown', (e) => {
        if (e.key === "Escape" && downloadModal.classList.contains('show')) {
            closeDownloadModal();
        }
    });
});
</script>
{% endblock %}