#WARNING: !!!!!!!!

#DO NOT USE THIS SCRIPT IF ITS NOT 100% NECESSARY!!!!!!!
#THIS SCRIPT IS FOR TESTING PURPOSES ONLY AND MAY CAUSE UNEXPECTED BEHAVIOR IN THE DATABASE
#OR THE APPLICATION ITSELF.
#USE AT YOUR OWN RISK!!!!!!!
#THIS SCRIPT IS NOT SUPPORTED BY THE APPLICATION AND MAY CAUSE DATA LOSS OR CORRUPTION.
#USE AT YOUR OWN RISK!!!!!!!

from sqlalchemy import create_engine, MetaData
from sqlalchemy.schema import CreateTable

import os
import sys

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from plantask.models.base import Base

#engine = create_engine("postgresql://docker_user:Plantaskwawawa@3.133.125.109:5432/plantask_db", echo=True)
engine = create_engine("postgresql://postgres:pTqEXLXwiAIeDDTnGbxrtNfWsdqmvgOD@centerbeam.proxy.rlwy.net:18613/railway", echo=True)

def create_tables():
    """Create the tables defined in the ORM models."""
    Base.metadata.create_all(engine)
    print("‚úÖ Tables have been created in the database.")

def drop_tables():
    """Drop all tables defined in the ORM models."""
    Base.metadata.drop_all(engine)
    print("‚ö†Ô∏è  All tables have been dropped from the database.")

def reset_tables():
    """Drop and recreate all tables."""
    drop_tables()
    create_tables()
    print("üîÑ Tables have been reset.")

def show_sql():
    """Display the SQL (DDL) that SQLAlchemy would generate."""
    print("\nüìÑ SQL generated by SQLAlchemy:")
    for table in Base.metadata.sorted_tables:
        ddl = str(CreateTable(table).compile(engine))
        print(f"\n-- Table: {table.name}\n{ddl}\n")

def main():
    print("=== Options Menu ===")
    print("1. Create tables in the database")
    print("2. Show generated SQL without executing")
    print("3. Drop and recreate tables (reset)")
    print("0. Exit")

    option = input("\nSelect an option: ")

    if option == "1":
        create_tables()
    elif option == "2":
        show_sql()
    elif option == "3":
        reset_tables()
    elif option == "0":
        print("üëã Exiting...")
    else:
        print("‚ùå Invalid option.")

if __name__ == "__main__":
    main()
