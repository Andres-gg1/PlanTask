{"name": "Test if all SQLAlchemy models are present in both databases, PROD and TEST", "status": "failed", "statusDetails": {"message": "AssertionError: Tables in DB but not defined in models:\n  {'alembic_version'}\nassert not {'alembic_version'}", "trace": "db_url = 'postgresql://postgres:hqDGUoMpypystmdWLOYHdzOMrABijDKi@hopper.proxy.rlwy.net:32534/railway'\n\n    @allure.title(\"Test if all SQLAlchemy models are present in both databases, PROD and TEST\")\n    @allure.description(\"\"\"\n    This test checks if all SQLAlchemy models are present in the actual database.\n    It compares the tables defined in the SQLAlchemy models with the tables present in the database.\n    If there are any discrepancies, it raises an assertion error.\n    \"\"\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @pytest.mark.parametrize(\"db_url\", DATABASES_URL)\n    def test_model_and_db_tables_match(db_url):\n        with allure.step(f\"Create SQLAlchemy engine for database URL: {db_url}\"):\n            engine = create_engine(db_url)\n    \n        with allure.step(\"Inspect database schema and retrieve table names\"):\n            inspector = inspect(engine)\n            db_tables = set(inspector.get_table_names())\n            model_tables = set(Base.metadata.tables.keys())\n    \n        with allure.step(\"Compare model tables with database tables\"):\n            missing_in_db = model_tables.difference(db_tables)\n            extra_in_db = db_tables.difference(model_tables)\n    \n            if missing_in_db:\n                allure.attach(str(missing_in_db), name=\"Missing Tables in DB\", attachment_type=allure.attachment_type.TEXT)\n            if extra_in_db:\n                allure.attach(str(extra_in_db), name=\"Extra Tables in DB\", attachment_type=allure.attachment_type.TEXT)\n    \n        with allure.step(\"Assert that model and database tables match\"):\n            assert not missing_in_db, f\"Tables defined in models but missing in DB:\\n{missing_in_db}\"\n>           assert not extra_in_db, f\"Tables in DB but not defined in models:\\n{extra_in_db}\"\nE           AssertionError: Tables in DB but not defined in models:\nE             {'alembic_version'}\nE           assert not {'alembic_version'}\n\ntest_database_schema_validation.py:58: AssertionError"}, "description": "\nThis test checks if all SQLAlchemy models are present in the actual database.\nIt compares the tables defined in the SQLAlchemy models with the tables present in the database.\nIf there are any discrepancies, it raises an assertion error.\n", "steps": [{"name": "Create SQLAlchemy engine for database URL: postgresql://postgres:hqDGUoMpypystmdWLOYHdzOMrABijDKi@hopper.proxy.rlwy.net:32534/railway", "status": "passed", "start": 1744308829519, "stop": 1744308829519}, {"name": "Inspect database schema and retrieve table names", "status": "passed", "start": 1744308829519, "stop": 1744308830777}, {"name": "Compare model tables with database tables", "status": "passed", "attachments": [{"name": "Extra Tables in DB", "source": "e8c1592d-77e4-4213-8c1f-a4a991a08a03-attachment.txt", "type": "text/plain"}], "start": 1744308830777, "stop": 1744308830777}, {"name": "Assert that model and database tables match", "status": "failed", "statusDetails": {"message": "AssertionError: Tables in DB but not defined in models:\n  {'alembic_version'}\nassert not {'alembic_version'}\n", "trace": "  File \"C:\\Users\\alang\\PlanTask-1\\plantask\\tests\\test_database_schema_validation.py\", line 58, in test_model_and_db_tables_match\n    assert not extra_in_db, f\"Tables in DB but not defined in models:\\n{extra_in_db}\"\n"}, "start": 1744308830777, "stop": 1744308830777}], "parameters": [{"name": "db_url", "value": "'postgresql://postgres:hqDGUoMpypystmdWLOYHdzOMrABijDKi@hopper.proxy.rlwy.net:32534/railway'"}], "start": 1744308829519, "stop": 1744308830778, "uuid": "9f678cdb-3b3e-43b8-b1dd-f8c22038548d", "historyId": "6b378af624e505de37745d41e772ce52", "testCaseId": "ba4f68d863333bece8f41e9716a30d63", "fullName": "tests.test_database_schema_validation#test_model_and_db_tables_match", "labels": [{"name": "severity", "value": "critical"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_database_schema_validation"}, {"name": "host", "value": "PolloPelon"}, {"name": "thread", "value": "28744-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_database_schema_validation"}]}