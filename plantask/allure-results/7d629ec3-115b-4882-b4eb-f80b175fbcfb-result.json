{"name": "Test if all SQLAlchemy models are present in both databases, PROD and TEST", "status": "failed", "statusDetails": {"message": "AssertionError: Tables defined in models but missing in DB:\n  {'labels', 'projects_users_microtasks', 'microtasks', 'microtask_comments', 'microtask_comments_files', 'projects', 'microtasks_files', 'labels_templates', 'labels_projects_users', 'templates', 'group_chats', 'task_comments', 'users', 'tasks', 'projects_users', 'personal_chats', 'notifications', 'tasks_files', 'activity_log', 'chat_logs', 'files', 'labels_tasks', 'chat_logs_files', 'templates_files', 'task_comments_files'}\nassert not {'activity_log', 'chat_logs', 'chat_logs_files', 'files', 'group_chats', 'labels', ...}", "trace": "db_url = 'postgresql://postgres:DRbfLrlvWYCYCULVimbRZxufXbujGHaK@trolley.proxy.rlwy.net:35649/railway'\n\n    @allure.title(\"Test if all SQLAlchemy models are present in both databases, PROD and TEST\")\n    @allure.description(\"\"\"\n    This test checks if all SQLAlchemy models are present in the actual database.\n    It compares the tables defined in the SQLAlchemy models with the tables present in the database.\n    If there are any discrepancies, it raises an assertion error.\n    \"\"\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @pytest.mark.parametrize(\"db_url\", DATABASES_URL)\n    def test_model_and_db_tables_match(db_url):\n        with allure.step(f\"Create SQLAlchemy engine for database URL: {db_url}\"):\n            engine = create_engine(db_url)\n    \n        with allure.step(\"Inspect database schema and retrieve table names excluding 'alembic_version'\"):\n            # Use the SQLAlchemy inspector to get the table names from the database\n            inspector = inspect(engine)\n            db_tables = set(inspector.get_table_names()) # Get the table names from the database\n            model_tables = set(Base.metadata.tables.keys()) # Get the table names from the SQLAlchemy models\n    \n            db_tables.discard('alembic_version') # Remove 'alembic_version' from the database tables\n            model_tables.discard('alembic_version') # Remove 'alembic_version' from the model tables\n    \n        with allure.step(\"Compare model tables with database tables\"):\n            missing_in_db = model_tables.difference(db_tables) # Tables defined in models but missing in DB\n            extra_in_db = db_tables.difference(model_tables) # Tables in DB but not defined in models\n    \n            if missing_in_db:\n                allure.attach(str(missing_in_db), name=\"Missing Tables in DB\", attachment_type=allure.attachment_type.TEXT) # Attach missing tables to Allure report\n            if extra_in_db:\n                allure.attach(str(extra_in_db), name=\"Extra Tables in DB\", attachment_type=allure.attachment_type.TEXT) # Attach extra tables to Allure report\n    \n        with allure.step(\"Assert that model and database tables match\"):\n>           assert not missing_in_db, f\"Tables defined in models but missing in DB:\\n{missing_in_db}\" # Tables defined in models but missing in DB\nE           AssertionError: Tables defined in models but missing in DB:\nE             {'labels', 'projects_users_microtasks', 'microtasks', 'microtask_comments', 'microtask_comments_files', 'projects', 'microtasks_files', 'labels_templates', 'labels_projects_users', 'templates', 'group_chats', 'task_comments', 'users', 'tasks', 'projects_users', 'personal_chats', 'notifications', 'tasks_files', 'activity_log', 'chat_logs', 'files', 'labels_tasks', 'chat_logs_files', 'templates_files', 'task_comments_files'}\nE           assert not {'activity_log', 'chat_logs', 'chat_logs_files', 'files', 'group_chats', 'labels', ...}\n\ntests\\test_database_schema_validation.py:94: AssertionError"}, "description": "\nThis test checks if all SQLAlchemy models are present in the actual database.\nIt compares the tables defined in the SQLAlchemy models with the tables present in the database.\nIf there are any discrepancies, it raises an assertion error.\n", "steps": [{"name": "Create SQLAlchemy engine for database URL: postgresql://postgres:DRbfLrlvWYCYCULVimbRZxufXbujGHaK@trolley.proxy.rlwy.net:35649/railway", "status": "passed", "start": 1745192685529, "stop": 1745192685529}, {"name": "Inspect database schema and retrieve table names excluding 'alembic_version'", "status": "passed", "start": 1745192685529, "stop": 1745192686842}, {"name": "Compare model tables with database tables", "status": "passed", "attachments": [{"name": "Missing Tables in DB", "source": "b8028fda-84bd-4f89-b70b-92312d164cb8-attachment.txt", "type": "text/plain"}], "start": 1745192686842, "stop": 1745192686842}, {"name": "Assert that model and database tables match", "status": "failed", "statusDetails": {"message": "AssertionError: Tables defined in models but missing in DB:\n  {'labels', 'projects_users_microtasks', 'microtasks', 'microtask_comments', 'microtask_comments_files', 'projects', 'microtasks_files', 'labels_templates', 'labels_projects_users', 'templates', 'group_chats', 'task_comments', 'users', 'tasks', 'projects_users', 'personal_chats', 'notifications', 'tasks_files', 'activity_log', 'chat_logs', 'files', 'labels_tasks', 'chat_logs_files', 'templates_files', 'task_comments_files'}\nassert not {'activity_log', 'chat_logs', 'chat_logs_files', 'files', 'group_chats', 'labels', ...}\n", "trace": "  File \"C:\\Users\\alang\\PlanTask-1\\plantask\\tests\\test_database_schema_validation.py\", line 94, in test_model_and_db_tables_match\n    assert not missing_in_db, f\"Tables defined in models but missing in DB:\\n{missing_in_db}\" # Tables defined in models but missing in DB\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n"}, "start": 1745192686842, "stop": 1745192686842}], "parameters": [{"name": "db_url", "value": "'postgresql://postgres:DRbfLrlvWYCYCULVimbRZxufXbujGHaK@trolley.proxy.rlwy.net:35649/railway'"}], "start": 1745192685529, "stop": 1745192686843, "uuid": "8fcedcc2-6b05-4974-8ae0-cdefef7720f2", "historyId": "edacd2cef5decd2ad90570f4a144c098", "testCaseId": "ba4f68d863333bece8f41e9716a30d63", "fullName": "tests.test_database_schema_validation#test_model_and_db_tables_match", "labels": [{"name": "severity", "value": "critical"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_database_schema_validation"}, {"name": "host", "value": "PolloPelon"}, {"name": "thread", "value": "17852-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_database_schema_validation"}]}