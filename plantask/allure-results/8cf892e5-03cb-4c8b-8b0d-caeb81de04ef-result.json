{"name": "Test if foreign keys in both DBs (PROD and TEST) match model definitions", "status": "broken", "statusDetails": {"message": "sqlalchemy.exc.NoSuchTableError: users", "trace": "db_url = 'postgresql://postgres:DRbfLrlvWYCYCULVimbRZxufXbujGHaK@trolley.proxy.rlwy.net:35649/railway'\n\n    @allure.title(\"Test if foreign keys in both DBs (PROD and TEST) match model definitions\")\n    @allure.description(\"\"\"\n    This test checks if the foreign keys defined in the SQLAlchemy models match the foreign keys present in the actual database.\n    It compares the foreign keys defined in the SQLAlchemy models with the foreign keys present in the database.\n    If there are any discrepancies, it raises an assertion error.\n    \"\"\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @pytest.mark.parametrize(\"db_url\", DATABASES_URL)\n    def test_foreign_keys_match(db_url):\n        \"\"\"Ensure that foreign keys in DB match model definitions.\"\"\"\n    \n        with allure.step(f\"Create SQLAlchemy engine for database URL: {db_url}\"):\n            engine = create_engine(db_url)  # Create a new engine instance for the test database\n    \n        with allure.step(\"Inspect database schema and retrieve foreign keys information\"):\n            inspector = inspect(engine)\n            metadata = Base.metadata\n    \n        for table_name in metadata.tables:\n            model_table = metadata.tables[table_name]\n>           db_fks = inspector.get_foreign_keys(table_name)\n\ntests\\test_database_schema_validation.py:122: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nenv\\Lib\\site-packages\\sqlalchemy\\engine\\reflection.py:1057: in get_foreign_keys\n    return self.dialect.get_foreign_keys(\n<string>:2: in get_foreign_keys\n    ???\nenv\\Lib\\site-packages\\sqlalchemy\\engine\\reflection.py:106: in cache\n    ret = fn(self, con, *args, **kw)\nenv\\Lib\\site-packages\\sqlalchemy\\dialects\\postgresql\\base.py:4227: in get_foreign_keys\n    return self._value_or_raise(data, table_name, schema)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x00000000070CF170>, data = dict_items([]), table = 'users', schema = None\n\n    def _value_or_raise(self, data, table, schema):\n        try:\n            return dict(data)[(schema, table)]\n        except KeyError:\n>           raise exc.NoSuchTableError(\n                f\"{schema}.{table}\" if schema else table\n            ) from None\nE           sqlalchemy.exc.NoSuchTableError: users\n\nenv\\Lib\\site-packages\\sqlalchemy\\dialects\\postgresql\\base.py:3583: NoSuchTableError"}, "description": "\nThis test checks if the foreign keys defined in the SQLAlchemy models match the foreign keys present in the actual database.\nIt compares the foreign keys defined in the SQLAlchemy models with the foreign keys present in the database.\nIf there are any discrepancies, it raises an assertion error.\n", "steps": [{"name": "Create SQLAlchemy engine for database URL: postgresql://postgres:DRbfLrlvWYCYCULVimbRZxufXbujGHaK@trolley.proxy.rlwy.net:35649/railway", "status": "passed", "start": 1745192694149, "stop": 1745192694149}, {"name": "Inspect database schema and retrieve foreign keys information", "status": "passed", "start": 1745192694149, "stop": 1745192695222}], "parameters": [{"name": "db_url", "value": "'postgresql://postgres:DRbfLrlvWYCYCULVimbRZxufXbujGHaK@trolley.proxy.rlwy.net:35649/railway'"}], "start": 1745192694149, "stop": 1745192695423, "uuid": "24c62366-bc13-48dd-98a8-73d0d823b750", "historyId": "952c9a4b429763e7369c1059a3f688f1", "testCaseId": "a145857725c6e661d83e045ab3bc3bc8", "fullName": "tests.test_database_schema_validation#test_foreign_keys_match", "labels": [{"name": "severity", "value": "critical"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_database_schema_validation"}, {"name": "host", "value": "PolloPelon"}, {"name": "thread", "value": "17852-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_database_schema_validation"}]}